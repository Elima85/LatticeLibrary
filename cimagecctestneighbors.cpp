#include "gtest/gtest.h"
#include "defs.h"
#include "cimage.h"
#include "cimageCC.h"
#include "exception.h"
#include <cmath>
#include <vector>

using namespace CImage;

TEST(CImageCC, neighbors) {
    /**
    * Tests getNeighbor(r,c,l,N) and getNeighbor(i,N). Since these
    * always call getXNeighbors(r,c,l), those methods should work
    * properly if the tests pass.
    */

    // image parameters
    int nR = 5, nC = 6, nL = 7, nB = 3;
    int N = nR * nC * nL;
    uint8 data[N];
    for (int i = 0; i < N * nB; i++) {
        data[i] = 0;
    }
    CImageCC<uint8> *imCC = new CImageCC<uint8>(data, nR, nC, nL, nB);

    vector<Neighbor> neighbors;
    int nNeighbors, returnedNeighbors, correctNNeighbors;
    // neighbor indices
    //{r,l,bo,t,f,ba,   bor,tr,bar,fr,bol,tl,bal,fl,boba,bof,tba,tf,   bofr,tfr,tbar,bobar,bofl,tfl,tbal,bobal}
    int CC6[6] = {171, 169, 176, 164, 140, 200};    // {63,61,67,57,37,87};
    int CC18[18] = {171, 169, 176, 164, 140, 200, 177, 165, 201, 141, 175, 163, 199, 139, 206, 146, 194, 134};    // {63,61,67,57,37,87,68,58,88,38,66,56,86,36,92,42,82,32};
    int CC26[26] = {171, 169, 176, 164, 140, 200, 177, 165, 201, 141, 175, 163, 199, 139, 206, 146, 194, 134, 147, 135, 195, 207, 145, 133, 193, 205};// {63,61,67,57,37,87,68,58,88,38,66,56,86,36,92,42,82,32,43,33,83,93,41,31,81,91};

    // 6 neighbors
    nNeighbors = 6;
    correctNNeighbors = 6;
    imCC->getNeighbors(3, 2, 5, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    EXPECT_EQ(neighbors[0].getIndex(), CC6[0]);
    EXPECT_EQ(neighbors[1].getIndex(), CC6[1]);
    EXPECT_EQ(neighbors[2].getIndex(), CC6[2]);
    EXPECT_EQ(neighbors[3].getIndex(), CC6[3]);
    EXPECT_EQ(neighbors[4].getIndex(), CC6[4]);
    EXPECT_EQ(neighbors[5].getIndex(), CC6[5]);
    imCC->getNeighbors(imCC->rclToIndex(3, 2, 5), nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    EXPECT_EQ(neighbors[0].getIndex(), CC6[0]);
    EXPECT_EQ(neighbors[1].getIndex(), CC6[1]);
    EXPECT_EQ(neighbors[2].getIndex(), CC6[2]);
    EXPECT_EQ(neighbors[3].getIndex(), CC6[3]);
    EXPECT_EQ(neighbors[4].getIndex(), CC6[4]);
    EXPECT_EQ(neighbors[5].getIndex(), CC6[5]);

    correctNNeighbors = 3;
    imCC->getNeighbors(0, 0, 0, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(nR - 1, nC - 1, nL - 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(nR - 1, 0, 0, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(0, nC - 1, 0, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(0, 0, nL - 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(0, nC - 1, nL - 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(nR - 1, 0, nL - 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(nR - 1, nC - 1, 0, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    correctNNeighbors = 4;
    imCC->getNeighbors(1, 0, 0, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(0, 1, 0, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(0, 0, 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(1, nC - 1, nL - 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(nR - 1, 1, nL - 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(nR - 1, nC - 1, 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(0, nC - 1, 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(0, 1, nL - 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(0, nC - 1, 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(1, nC - 1, 0, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(nR - 1, 1, 0, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(1, nC - 1, 0, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    correctNNeighbors = 5;
    imCC->getNeighbors(0, 1, 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(1, 0, 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(1, 1, 0, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(nR - 1, nC - 2, nL - 2, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(nR - 2, nC - 1, nL - 2, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(nR - 2, nC - 2, nL - 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);

    // 18 neighbors
    nNeighbors = 18;
    correctNNeighbors = 18;
    imCC->getNeighbors(3, 2, 5, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    EXPECT_EQ(neighbors[0].getIndex(), CC18[0]);
    EXPECT_EQ(neighbors[1].getIndex(), CC18[1]);
    EXPECT_EQ(neighbors[2].getIndex(), CC18[2]);
    EXPECT_EQ(neighbors[3].getIndex(), CC18[3]);
    EXPECT_EQ(neighbors[4].getIndex(), CC18[4]);
    EXPECT_EQ(neighbors[5].getIndex(), CC18[5]);
    EXPECT_EQ(neighbors[6].getIndex(), CC18[6]);
    EXPECT_EQ(neighbors[7].getIndex(), CC18[7]);
    EXPECT_EQ(neighbors[8].getIndex(), CC18[8]);
    EXPECT_EQ(neighbors[9].getIndex(), CC18[9]);
    EXPECT_EQ(neighbors[10].getIndex(), CC18[10]);
    EXPECT_EQ(neighbors[11].getIndex(), CC18[11]);
    EXPECT_EQ(neighbors[12].getIndex(), CC18[12]);
    EXPECT_EQ(neighbors[13].getIndex(), CC18[13]);
    EXPECT_EQ(neighbors[14].getIndex(), CC18[14]);
    EXPECT_EQ(neighbors[15].getIndex(), CC18[15]);
    EXPECT_EQ(neighbors[16].getIndex(), CC18[16]);
    EXPECT_EQ(neighbors[17].getIndex(), CC18[17]);
    imCC->getNeighbors(imCC->rclToIndex(3, 2, 5), nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    EXPECT_EQ(neighbors[0].getIndex(), CC18[0]);
    EXPECT_EQ(neighbors[1].getIndex(), CC18[1]);
    EXPECT_EQ(neighbors[2].getIndex(), CC18[2]);
    EXPECT_EQ(neighbors[3].getIndex(), CC18[3]);
    EXPECT_EQ(neighbors[4].getIndex(), CC18[4]);
    EXPECT_EQ(neighbors[5].getIndex(), CC18[5]);
    EXPECT_EQ(neighbors[6].getIndex(), CC18[6]);
    EXPECT_EQ(neighbors[7].getIndex(), CC18[7]);
    EXPECT_EQ(neighbors[8].getIndex(), CC18[8]);
    EXPECT_EQ(neighbors[9].getIndex(), CC18[9]);
    EXPECT_EQ(neighbors[10].getIndex(), CC18[10]);
    EXPECT_EQ(neighbors[11].getIndex(), CC18[11]);
    EXPECT_EQ(neighbors[12].getIndex(), CC18[12]);
    EXPECT_EQ(neighbors[13].getIndex(), CC18[13]);
    EXPECT_EQ(neighbors[14].getIndex(), CC18[14]);
    EXPECT_EQ(neighbors[15].getIndex(), CC18[15]);
    EXPECT_EQ(neighbors[16].getIndex(), CC18[16]);
    EXPECT_EQ(neighbors[17].getIndex(), CC18[17]);

    correctNNeighbors = 6;
    imCC->getNeighbors(0, 0, 0, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(nR - 1, nC - 1, nL - 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(nR - 1, 0, 0, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(0, nC - 1, 0, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(0, 0, nL - 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(0, nC - 1, nL - 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(nR - 1, 0, nL - 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(nR - 1, nC - 1, 0, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    correctNNeighbors = 9;
    imCC->getNeighbors(1, 0, 0, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(0, 1, 0, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(0, 0, 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(1, nC - 1, nL - 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(nR - 1, 1, nL - 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(nR - 1, nC - 1, 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(0, nC - 1, 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(0, 1, nL - 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(0, nC - 1, 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(1, nC - 1, 0, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(nR - 1, 1, 0, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(1, nC - 1, 0, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    correctNNeighbors = 13;
    imCC->getNeighbors(0, 1, 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(1, 0, 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(1, 1, 0, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(nR - 1, nC - 2, nL - 2, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(nR - 2, nC - 1, nL - 2, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(nR - 2, nC - 2, nL - 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);

    // 26 neighbors
    nNeighbors = 26;
    correctNNeighbors = 26;
    imCC->getNeighbors(3, 2, 5, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    EXPECT_EQ(neighbors[0].getIndex(), CC26[0]);
    EXPECT_EQ(neighbors[1].getIndex(), CC26[1]);
    EXPECT_EQ(neighbors[2].getIndex(), CC26[2]);
    EXPECT_EQ(neighbors[3].getIndex(), CC26[3]);
    EXPECT_EQ(neighbors[4].getIndex(), CC26[4]);
    EXPECT_EQ(neighbors[5].getIndex(), CC26[5]);
    EXPECT_EQ(neighbors[6].getIndex(), CC26[6]);
    EXPECT_EQ(neighbors[7].getIndex(), CC26[7]);
    EXPECT_EQ(neighbors[8].getIndex(), CC26[8]);
    EXPECT_EQ(neighbors[9].getIndex(), CC26[9]);
    EXPECT_EQ(neighbors[10].getIndex(), CC26[10]);
    EXPECT_EQ(neighbors[11].getIndex(), CC26[11]);
    EXPECT_EQ(neighbors[12].getIndex(), CC26[12]);
    EXPECT_EQ(neighbors[13].getIndex(), CC26[13]);
    EXPECT_EQ(neighbors[14].getIndex(), CC26[14]);
    EXPECT_EQ(neighbors[15].getIndex(), CC26[15]);
    EXPECT_EQ(neighbors[16].getIndex(), CC26[16]);
    EXPECT_EQ(neighbors[17].getIndex(), CC26[17]);
    EXPECT_EQ(neighbors[18].getIndex(), CC26[18]);
    EXPECT_EQ(neighbors[19].getIndex(), CC26[19]);
    EXPECT_EQ(neighbors[20].getIndex(), CC26[20]);
    EXPECT_EQ(neighbors[21].getIndex(), CC26[21]);
    EXPECT_EQ(neighbors[22].getIndex(), CC26[22]);
    EXPECT_EQ(neighbors[23].getIndex(), CC26[23]);
    EXPECT_EQ(neighbors[24].getIndex(), CC26[24]);
    EXPECT_EQ(neighbors[25].getIndex(), CC26[25]);
    imCC->getNeighbors(imCC->rclToIndex(3, 2, 5), nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    EXPECT_EQ(neighbors[0].getIndex(), CC26[0]);
    EXPECT_EQ(neighbors[1].getIndex(), CC26[1]);
    EXPECT_EQ(neighbors[2].getIndex(), CC26[2]);
    EXPECT_EQ(neighbors[3].getIndex(), CC26[3]);
    EXPECT_EQ(neighbors[4].getIndex(), CC26[4]);
    EXPECT_EQ(neighbors[5].getIndex(), CC26[5]);
    EXPECT_EQ(neighbors[6].getIndex(), CC26[6]);
    EXPECT_EQ(neighbors[7].getIndex(), CC26[7]);
    EXPECT_EQ(neighbors[8].getIndex(), CC26[8]);
    EXPECT_EQ(neighbors[9].getIndex(), CC26[9]);
    EXPECT_EQ(neighbors[10].getIndex(), CC26[10]);
    EXPECT_EQ(neighbors[11].getIndex(), CC26[11]);
    EXPECT_EQ(neighbors[12].getIndex(), CC26[12]);
    EXPECT_EQ(neighbors[13].getIndex(), CC26[13]);
    EXPECT_EQ(neighbors[14].getIndex(), CC26[14]);
    EXPECT_EQ(neighbors[15].getIndex(), CC26[15]);
    EXPECT_EQ(neighbors[16].getIndex(), CC26[16]);
    EXPECT_EQ(neighbors[17].getIndex(), CC26[17]);
    EXPECT_EQ(neighbors[18].getIndex(), CC26[18]);
    EXPECT_EQ(neighbors[19].getIndex(), CC26[19]);
    EXPECT_EQ(neighbors[20].getIndex(), CC26[20]);
    EXPECT_EQ(neighbors[21].getIndex(), CC26[21]);
    EXPECT_EQ(neighbors[22].getIndex(), CC26[22]);
    EXPECT_EQ(neighbors[23].getIndex(), CC26[23]);
    EXPECT_EQ(neighbors[24].getIndex(), CC26[24]);
    EXPECT_EQ(neighbors[25].getIndex(), CC26[25]);
    correctNNeighbors = 7;
    imCC->getNeighbors(0, 0, 0, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(nR - 1, nC - 1, nL - 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(nR - 1, 0, 0, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(0, nC - 1, 0, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(0, 0, nL - 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(0, nC - 1, nL - 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(nR - 1, 0, nL - 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(nR - 1, nC - 1, 0, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    correctNNeighbors = 11;
    imCC->getNeighbors(1, 0, 0, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(0, 1, 0, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(0, 0, 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(1, nC - 1, nL - 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(nR - 1, 1, nL - 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(nR - 1, nC - 1, 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(0, nC - 1, 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(0, 1, nL - 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(0, nC - 1, 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(1, nC - 1, 0, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(nR - 1, 1, 0, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(1, nC - 1, 0, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    correctNNeighbors = 17;
    imCC->getNeighbors(0, 1, 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(1, 0, 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(1, 1, 0, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(nR - 1, nC - 2, nL - 2, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(nR - 2, nC - 1, nL - 2, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);
    imCC->getNeighbors(nR - 2, nC - 2, nL - 1, nNeighbors, neighbors);
    returnedNeighbors = neighbors.size();
    EXPECT_EQ(returnedNeighbors, correctNNeighbors);

    // Exceptions
    nNeighbors = 6;
    EXPECT_THROW(imCC->getNeighbors(nR, 0, 0, nNeighbors, neighbors), outsideImageException);
    EXPECT_THROW(imCC->getNeighbors(-1, 0, 0, nNeighbors, neighbors), outsideImageException);
    EXPECT_THROW(imCC->getNeighbors(0, nC, 0, nNeighbors, neighbors), outsideImageException);
    EXPECT_THROW(imCC->getNeighbors(0, -1, 0, nNeighbors, neighbors), outsideImageException);
    EXPECT_THROW(imCC->getNeighbors(0, 0, nL, nNeighbors, neighbors), outsideImageException);
    EXPECT_THROW(imCC->getNeighbors(0, 0, -1, nNeighbors, neighbors), outsideImageException);
    nNeighbors = 18;
    EXPECT_THROW(imCC->getNeighbors(nR, 0, 0, nNeighbors, neighbors), outsideImageException);
    EXPECT_THROW(imCC->getNeighbors(-1, 0, 0, nNeighbors, neighbors), outsideImageException);
    EXPECT_THROW(imCC->getNeighbors(0, nC, 0, nNeighbors, neighbors), outsideImageException);
    EXPECT_THROW(imCC->getNeighbors(0, -1, 0, nNeighbors, neighbors), outsideImageException);
    EXPECT_THROW(imCC->getNeighbors(0, 0, nL, nNeighbors, neighbors), outsideImageException);
    EXPECT_THROW(imCC->getNeighbors(0, 0, -1, nNeighbors, neighbors), outsideImageException);
    nNeighbors = 26;
    EXPECT_THROW(imCC->getNeighbors(nR, 0, 0, nNeighbors, neighbors), outsideImageException);
    EXPECT_THROW(imCC->getNeighbors(-1, 0, 0, nNeighbors, neighbors), outsideImageException);
    EXPECT_THROW(imCC->getNeighbors(0, nC, 0, nNeighbors, neighbors), outsideImageException);
    EXPECT_THROW(imCC->getNeighbors(0, -1, 0, nNeighbors, neighbors), outsideImageException);
    EXPECT_THROW(imCC->getNeighbors(0, 0, nL, nNeighbors, neighbors), outsideImageException);
    EXPECT_THROW(imCC->getNeighbors(0, 0, -1, nNeighbors, neighbors), outsideImageException);
    nNeighbors = 8;
    EXPECT_THROW(imCC->getNeighbors(0, 0, 0, nNeighbors, neighbors), nNeighborsException);
    nNeighbors = 12;
    EXPECT_THROW(imCC->getNeighbors(0, 0, 0, nNeighbors, neighbors), nNeighborsException);
    nNeighbors = 14;
    EXPECT_THROW(imCC->getNeighbors(0, 0, 0, nNeighbors, neighbors), nNeighborsException);
    // nNeighbors = 18 is valid for both CC and FCC.
    nNeighbors = -6;
    EXPECT_THROW(imCC->getNeighbors(0, 0, 0, nNeighbors, neighbors), nNeighborsException);
    nNeighbors = 0;
    EXPECT_THROW(imCC->getNeighbors(0, 0, 0, nNeighbors, neighbors), nNeighborsException);
    nNeighbors = 100;
    EXPECT_THROW(imCC->getNeighbors(0, 0, 0, nNeighbors, neighbors), nNeighborsException);

    delete imCC;

}
