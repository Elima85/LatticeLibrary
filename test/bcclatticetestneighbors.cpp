#include "gtest/gtest.h"
#include "../bcclattice.h"
#include "../exception.h"

using namespace LatticeLib;

TEST(BCCLattice,neighbors) {

    int nRows = 5;
    int nColumns = 6;
    int nLayers = 7;
    int nElements = nRows * nColumns * nLayers;
    double scaleFactor1 = 1.0;
    double scaleFactor2 = 2.5;
    BCCLattice lattice(nRows, nColumns, nLayers, scaleFactor1);
    // {tlf,trf,bolf,borf,tlba,trba,bolba,borba,   t,f,l,ba,r,bo}
    int BCC8EL[8] = {45, 46, 51, 52, 105, 106, 111, 112};
    int BCC8OL[8] = {82, 83, 88, 89, 142, 143, 148, 149};
    int BCC14EL[14] = {45, 46, 51, 52, 105, 106, 111, 112, 76, 22, 81, 142, 83, 88};
    int BCC14OL[14] = {82, 83, 88, 89, 142, 143, 148, 149, 106, 52, 111, 172, 113, 118};
    vector<Neighbor> neighbors;
    int neighborhoodSize, correctNNeighbors;

    // 8 neighbors
    neighborhoodSize = 8;
    correctNNeighbors = 8;
    lattice.getNeighbors(3, 4, 2, neighborhoodSize, neighbors);
    EXPECT_EQ(neighbors.size(), correctNNeighbors);
    EXPECT_EQ(neighbors[0].getElementIndex(), BCC8EL[0]);
    EXPECT_EQ(neighbors[1].getElementIndex(), BCC8EL[1]);
    EXPECT_EQ(neighbors[2].getElementIndex(), BCC8EL[2]);
    EXPECT_EQ(neighbors[3].getElementIndex(), BCC8EL[3]);
    EXPECT_EQ(neighbors[4].getElementIndex(), BCC8EL[4]);
    EXPECT_EQ(neighbors[5].getElementIndex(), BCC8EL[5]);
    EXPECT_EQ(neighbors[6].getElementIndex(), BCC8EL[6]);
    EXPECT_EQ(neighbors[7].getElementIndex(), BCC8EL[7]);
    lattice.getNeighbors(lattice.rclToIndex(3, 4, 2), neighborhoodSize, neighbors);
    EXPECT_EQ(neighbors.size(), correctNNeighbors);
    EXPECT_EQ(neighbors[0].getElementIndex(), BCC8EL[0]);
    EXPECT_EQ(neighbors[1].getElementIndex(), BCC8EL[1]);
    EXPECT_EQ(neighbors[2].getElementIndex(), BCC8EL[2]);
    EXPECT_EQ(neighbors[3].getElementIndex(), BCC8EL[3]);
    EXPECT_EQ(neighbors[4].getElementIndex(), BCC8EL[4]);
    EXPECT_EQ(neighbors[5].getElementIndex(), BCC8EL[5]);
    EXPECT_EQ(neighbors[6].getElementIndex(), BCC8EL[6]);
    EXPECT_EQ(neighbors[7].getElementIndex(), BCC8EL[7]);
    lattice.getNeighbors(3, 4, 3, neighborhoodSize, neighbors);
    EXPECT_EQ(neighbors.size(), correctNNeighbors);
    EXPECT_EQ(neighbors[0].getElementIndex(), BCC8OL[0]);
    EXPECT_EQ(neighbors[1].getElementIndex(), BCC8OL[1]);
    EXPECT_EQ(neighbors[2].getElementIndex(), BCC8OL[2]);
    EXPECT_EQ(neighbors[3].getElementIndex(), BCC8OL[3]);
    EXPECT_EQ(neighbors[4].getElementIndex(), BCC8OL[4]);
    EXPECT_EQ(neighbors[5].getElementIndex(), BCC8OL[5]);
    EXPECT_EQ(neighbors[6].getElementIndex(), BCC8OL[6]);
    EXPECT_EQ(neighbors[7].getElementIndex(), BCC8OL[7]);
    lattice.getNeighbors(lattice.rclToIndex(3, 4, 3), neighborhoodSize, neighbors);
    EXPECT_EQ(neighbors.size(), correctNNeighbors);
    EXPECT_EQ(neighbors[0].getElementIndex(), BCC8OL[0]);
    EXPECT_EQ(neighbors[1].getElementIndex(), BCC8OL[1]);
    EXPECT_EQ(neighbors[2].getElementIndex(), BCC8OL[2]);
    EXPECT_EQ(neighbors[3].getElementIndex(), BCC8OL[3]);
    EXPECT_EQ(neighbors[4].getElementIndex(), BCC8OL[4]);
    EXPECT_EQ(neighbors[5].getElementIndex(), BCC8OL[5]);
    EXPECT_EQ(neighbors[6].getElementIndex(), BCC8OL[6]);
    EXPECT_EQ(neighbors[7].getElementIndex(), BCC8OL[7]);
    correctNNeighbors = 1;
    lattice.getNeighbors(0, 0, 0, neighborhoodSize, neighbors);
    EXPECT_EQ(neighbors.size(), correctNNeighbors);
    correctNNeighbors = 2;
    lattice.getNeighbors(4, 0, 6, neighborhoodSize, neighbors);
    EXPECT_EQ(neighbors.size(), correctNNeighbors);
    correctNNeighbors = 4;
    lattice.getNeighbors(nRows - 1, nColumns - 1, nLayers - 1, neighborhoodSize, neighbors);
    EXPECT_EQ(neighbors.size(), correctNNeighbors);
    lattice.getNeighbors(0, 5, 1, neighborhoodSize, neighbors);
    EXPECT_EQ(neighbors.size(), correctNNeighbors);
    lattice.getNeighbors(4, 0, 5, neighborhoodSize, neighbors);
    EXPECT_EQ(neighbors.size(), correctNNeighbors);

    // 14 neighbors
    neighborhoodSize = 14;
    correctNNeighbors = 14;
    lattice.getNeighbors(3, 4, 2, neighborhoodSize, neighbors);
    EXPECT_EQ(neighbors.size(), correctNNeighbors);
    EXPECT_EQ(neighbors[0].getElementIndex(), BCC14EL[0]);
    EXPECT_EQ(neighbors[1].getElementIndex(), BCC14EL[1]);
    EXPECT_EQ(neighbors[2].getElementIndex(), BCC14EL[2]);
    EXPECT_EQ(neighbors[3].getElementIndex(), BCC14EL[3]);
    EXPECT_EQ(neighbors[4].getElementIndex(), BCC14EL[4]);
    EXPECT_EQ(neighbors[5].getElementIndex(), BCC14EL[5]);
    EXPECT_EQ(neighbors[6].getElementIndex(), BCC14EL[6]);
    EXPECT_EQ(neighbors[7].getElementIndex(), BCC14EL[7]);
    EXPECT_EQ(neighbors[8].getElementIndex(), BCC14EL[8]);
    EXPECT_EQ(neighbors[9].getElementIndex(), BCC14EL[9]);
    EXPECT_EQ(neighbors[10].getElementIndex(), BCC14EL[10]);
    EXPECT_EQ(neighbors[11].getElementIndex(), BCC14EL[11]);
    EXPECT_EQ(neighbors[12].getElementIndex(), BCC14EL[12]);
    EXPECT_EQ(neighbors[13].getElementIndex(), BCC14EL[13]);
    lattice.getNeighbors(lattice.rclToIndex(3, 4, 2), neighborhoodSize, neighbors);
    EXPECT_EQ(neighbors.size(), correctNNeighbors);
    EXPECT_EQ(neighbors[0].getElementIndex(), BCC14EL[0]);
    EXPECT_EQ(neighbors[1].getElementIndex(), BCC14EL[1]);
    EXPECT_EQ(neighbors[2].getElementIndex(), BCC14EL[2]);
    EXPECT_EQ(neighbors[3].getElementIndex(), BCC14EL[3]);
    EXPECT_EQ(neighbors[4].getElementIndex(), BCC14EL[4]);
    EXPECT_EQ(neighbors[5].getElementIndex(), BCC14EL[5]);
    EXPECT_EQ(neighbors[6].getElementIndex(), BCC14EL[6]);
    EXPECT_EQ(neighbors[7].getElementIndex(), BCC14EL[7]);
    EXPECT_EQ(neighbors[8].getElementIndex(), BCC14EL[8]);
    EXPECT_EQ(neighbors[9].getElementIndex(), BCC14EL[9]);
    EXPECT_EQ(neighbors[10].getElementIndex(), BCC14EL[10]);
    EXPECT_EQ(neighbors[11].getElementIndex(), BCC14EL[11]);
    EXPECT_EQ(neighbors[12].getElementIndex(), BCC14EL[12]);
    EXPECT_EQ(neighbors[13].getElementIndex(), BCC14EL[13]);
    lattice.getNeighbors(3, 4, 3, neighborhoodSize, neighbors);
    EXPECT_EQ(neighbors.size(), correctNNeighbors);
    EXPECT_EQ(neighbors[0].getElementIndex(), BCC14OL[0]);
    EXPECT_EQ(neighbors[1].getElementIndex(), BCC14OL[1]);
    EXPECT_EQ(neighbors[2].getElementIndex(), BCC14OL[2]);
    EXPECT_EQ(neighbors[3].getElementIndex(), BCC14OL[3]);
    EXPECT_EQ(neighbors[4].getElementIndex(), BCC14OL[4]);
    EXPECT_EQ(neighbors[5].getElementIndex(), BCC14OL[5]);
    EXPECT_EQ(neighbors[6].getElementIndex(), BCC14OL[6]);
    EXPECT_EQ(neighbors[7].getElementIndex(), BCC14OL[7]);
    EXPECT_EQ(neighbors[8].getElementIndex(), BCC14OL[8]);
    EXPECT_EQ(neighbors[9].getElementIndex(), BCC14OL[9]);
    EXPECT_EQ(neighbors[10].getElementIndex(), BCC14OL[10]);
    EXPECT_EQ(neighbors[11].getElementIndex(), BCC14OL[11]);
    EXPECT_EQ(neighbors[12].getElementIndex(), BCC14OL[12]);
    EXPECT_EQ(neighbors[13].getElementIndex(), BCC14OL[13]);
    lattice.getNeighbors(lattice.rclToIndex(3, 4, 3), neighborhoodSize, neighbors);
    EXPECT_EQ(neighbors.size(), correctNNeighbors);
    EXPECT_EQ(neighbors[0].getElementIndex(), BCC14OL[0]);
    EXPECT_EQ(neighbors[1].getElementIndex(), BCC14OL[1]);
    EXPECT_EQ(neighbors[2].getElementIndex(), BCC14OL[2]);
    EXPECT_EQ(neighbors[3].getElementIndex(), BCC14OL[3]);
    EXPECT_EQ(neighbors[4].getElementIndex(), BCC14OL[4]);
    EXPECT_EQ(neighbors[5].getElementIndex(), BCC14OL[5]);
    EXPECT_EQ(neighbors[6].getElementIndex(), BCC14OL[6]);
    EXPECT_EQ(neighbors[7].getElementIndex(), BCC14OL[7]);
    EXPECT_EQ(neighbors[8].getElementIndex(), BCC14OL[8]);
    EXPECT_EQ(neighbors[9].getElementIndex(), BCC14OL[9]);
    EXPECT_EQ(neighbors[10].getElementIndex(), BCC14OL[10]);
    EXPECT_EQ(neighbors[11].getElementIndex(), BCC14OL[11]);
    EXPECT_EQ(neighbors[12].getElementIndex(), BCC14OL[12]);
    EXPECT_EQ(neighbors[13].getElementIndex(), BCC14OL[13]);
    correctNNeighbors = 4;
    lattice.getNeighbors(0, 0, 0, neighborhoodSize, neighbors);
    EXPECT_EQ(neighbors.size(), correctNNeighbors);
    correctNNeighbors = 5;
    lattice.getNeighbors(4, 0, 6, neighborhoodSize, neighbors);
    EXPECT_EQ(neighbors.size(), correctNNeighbors);
    correctNNeighbors = 7;
    lattice.getNeighbors(nRows - 1, nColumns - 1, nLayers - 1, neighborhoodSize, neighbors);
    EXPECT_EQ(neighbors.size(), correctNNeighbors);
    lattice.getNeighbors(0, 5, 1, neighborhoodSize, neighbors);
    EXPECT_EQ(neighbors.size(), correctNNeighbors);
    lattice.getNeighbors(4, 0, 5, neighborhoodSize, neighbors);
    EXPECT_EQ(neighbors.size(), correctNNeighbors);

    // Exceptions
    neighborhoodSize = 8;
    EXPECT_THROW(lattice.getNeighbors(nRows, 0, 0, neighborhoodSize, neighbors), outOfRangeException);
    EXPECT_THROW(lattice.getNeighbors(-1, 0, 0, neighborhoodSize, neighbors), outOfRangeException);
    EXPECT_THROW(lattice.getNeighbors(0, nColumns, 0, neighborhoodSize, neighbors), outOfRangeException);
    EXPECT_THROW(lattice.getNeighbors(0, -1, 0, neighborhoodSize, neighbors), outOfRangeException);
    EXPECT_THROW(lattice.getNeighbors(0, 0, nLayers, neighborhoodSize, neighbors), outOfRangeException);
    EXPECT_THROW(lattice.getNeighbors(0, 0, -1, neighborhoodSize, neighbors), outOfRangeException);
    neighborhoodSize = 14;
    EXPECT_THROW(lattice.getNeighbors(nRows, 0, 0, neighborhoodSize, neighbors), outOfRangeException);
    EXPECT_THROW(lattice.getNeighbors(-1, 0, 0, neighborhoodSize, neighbors), outOfRangeException);
    EXPECT_THROW(lattice.getNeighbors(0, nColumns, 0, neighborhoodSize, neighbors), outOfRangeException);
    EXPECT_THROW(lattice.getNeighbors(0, -1, 0, neighborhoodSize, neighbors), outOfRangeException);
    EXPECT_THROW(lattice.getNeighbors(0, 0, nLayers, neighborhoodSize, neighbors), outOfRangeException);
    EXPECT_THROW(lattice.getNeighbors(0, 0, -1, neighborhoodSize, neighbors), outOfRangeException);
    neighborhoodSize = 6;
    EXPECT_THROW(lattice.getNeighbors(0, 0, 0, neighborhoodSize, neighbors), incompatibleParametersException);
    neighborhoodSize = 12;
    EXPECT_THROW(lattice.getNeighbors(0, 0, 0, neighborhoodSize, neighbors), incompatibleParametersException);
    neighborhoodSize = 18;
    EXPECT_THROW(lattice.getNeighbors(0, 0, 0, neighborhoodSize, neighbors), incompatibleParametersException);
    neighborhoodSize = 26;
    EXPECT_THROW(lattice.getNeighbors(0, 0, 0, neighborhoodSize, neighbors), incompatibleParametersException);
    neighborhoodSize = -8;
    EXPECT_THROW(lattice.getNeighbors(0, 0, 0, neighborhoodSize, neighbors), incompatibleParametersException);
    neighborhoodSize = 0;
    EXPECT_THROW(lattice.getNeighbors(0, 0, 0, neighborhoodSize, neighbors), incompatibleParametersException);
    neighborhoodSize = 100;
    EXPECT_THROW(lattice.getNeighbors(0, 0, 0, neighborhoodSize, neighbors), incompatibleParametersException);
}