#include "gtest/gtest.h"
#include "defs.h"
#include "image.h"
#include "cclattice.h"
#include "bcclattice.h"
#include "fcclattice.h"
#include <cmath>

using namespace LatticeLib;

TEST(Image, coordinates) {

    int nRows = 5;
    int nColumns = 6;
    int nLayers = 7;
    int nElements = nRows * nColumns * nLayers;
    double scaleFactor1 = 1.0;
    double scaleFactor2 = cbrt(2.5);
    CCLattice *latticeCC1 = new CCLattice(nRows, nColumns, nLayers, scaleFactor1);
    CCLattice *latticeCC2 = new CCLattice(nRows, nColumns, nLayers, scaleFactor2);
    BCCLattice *latticeBCC1 = new BCCLattice(nRows, nColumns, nLayers, scaleFactor1);
    BCCLattice *latticeBCC2 = new BCCLattice(nRows, nColumns, nLayers, scaleFactor2);
    FCCLattice *latticeFCC1 = new FCCLattice(nRows, nColumns, nLayers, scaleFactor1);
    FCCLattice *latticeFCC2 = new FCCLattice(nRows, nColumns, nLayers, scaleFactor2);
    
    int nBands = 1;
    uint8 data[nElements];
    for (int i = 0; i < nElements; i++) {
        data[i] = 0;
    }
    Image<uint8> *imageCC1 = new Image<uint8>(data, *latticeCC1, nBands);
    Image<uint8> *imageCC2 = new Image<uint8>(data, *latticeCC2, nBands);
    Image<uint8> *imageBCC1 = new Image<uint8>(data, *latticeBCC1, nBands);
    Image<uint8> *imageBCC2 = new Image<uint8>(data, *latticeBCC2, nBands);
    Image<uint8> *imageFCC1 = new Image<uint8>(data, *latticeFCC1, nBands);
    Image<uint8> *imageFCC2 = new Image<uint8>(data, *latticeFCC2, nBands);

    vector<double> coordinates;

    // coordinates, unit scale
    EXPECT_NEAR(imageCC1->indexToX(0), 0.5, EPSILONT);
    EXPECT_NEAR(imageCC1->indexToY(0), 0.5, EPSILONT);
    EXPECT_NEAR(imageCC1->indexToZ(0), 0.5, EPSILONT);
    EXPECT_NEAR(imageCC1->indexToX(170), 0.5 + 2, EPSILONT);
    EXPECT_NEAR(imageCC1->indexToY(170), 0.5 + 3, EPSILONT);
    EXPECT_NEAR(imageCC1->indexToZ(170), 0.5 + 5, EPSILONT);
    EXPECT_NEAR(imageCC1->indexToX(209), 0.5 + 5, EPSILONT);
    EXPECT_NEAR(imageCC1->indexToY(209), 0.5 + 4, EPSILONT);
    EXPECT_NEAR(imageCC1->indexToZ(209), 0.5 + 6, EPSILONT);
    EXPECT_NEAR(imageCC1->indexToX(nElements - 1), 0.5 + nColumns - 1, EPSILONT);
    EXPECT_NEAR(imageCC1->indexToY(nElements - 1), 0.5 + nRows - 1, EPSILONT);
    EXPECT_NEAR(imageCC1->indexToZ(nElements - 1), 0.5 + nLayers - 1, EPSILONT);
    imageCC1->getCoordinates(0, coordinates);
    EXPECT_NEAR(coordinates[0], 0.5, EPSILONT);
    EXPECT_NEAR(coordinates[1], 0.5, EPSILONT);
    EXPECT_NEAR(coordinates[2], 0.5, EPSILONT);
    imageCC1->getCoordinates(170, coordinates);
    EXPECT_NEAR(coordinates[0], 0.5 + 2, EPSILONT);
    EXPECT_NEAR(coordinates[1], 0.5 + 3, EPSILONT);
    EXPECT_NEAR(coordinates[2], 0.5 + 5, EPSILONT);
    imageCC1->getCoordinates(209, coordinates);
    EXPECT_NEAR(coordinates[0], 0.5 + 5, EPSILONT);
    EXPECT_NEAR(coordinates[1], 0.5 + 4, EPSILONT);
    EXPECT_NEAR(coordinates[2], 0.5 + 6, EPSILONT);
    imageCC1->getCoordinates(nElements - 1, coordinates);
    EXPECT_NEAR(coordinates[0], 0.5 + nColumns - 1, EPSILONT);
    EXPECT_NEAR(coordinates[1], 0.5 + nRows - 1, EPSILONT);
    EXPECT_NEAR(coordinates[2], 0.5 + nLayers - 1, EPSILONT);

    EXPECT_NEAR(imageBCC1->indexToX(0), BCCOFFSET, EPSILONT);
    EXPECT_NEAR(imageBCC1->indexToY(0), BCCOFFSET, EPSILONT);
    EXPECT_NEAR(imageBCC1->indexToZ(0), BCCOFFSET, EPSILONT);
    EXPECT_NEAR(imageBCC1->indexToX(82), BCCOFFSET + 4 * BCCSQFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageBCC1->indexToY(82), BCCOFFSET + 3 * BCCSQFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageBCC1->indexToZ(82), BCCOFFSET + BCCSQFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageBCC1->indexToX(112), BCCOFFSET + 9 * BCCOFFSET, EPSILONT);
    EXPECT_NEAR(imageBCC1->indexToY(112), BCCOFFSET + 7 * BCCOFFSET, EPSILONT);
    EXPECT_NEAR(imageBCC1->indexToZ(112), BCCOFFSET + 3 * BCCOFFSET, EPSILONT);
    EXPECT_NEAR(imageBCC1->indexToX(209), BCCOFFSET + 5 * BCCSQFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageBCC1->indexToY(209), BCCOFFSET + 4 * BCCSQFACEDISTANCE, EPSILONT); // !!!!!!
    EXPECT_NEAR(imageBCC1->indexToZ(209), BCCOFFSET + 3 * BCCSQFACEDISTANCE, EPSILONT);

    imageBCC1->getCoordinates(0, coordinates);
    EXPECT_NEAR(coordinates[0], BCCOFFSET, EPSILONT);
    EXPECT_NEAR(coordinates[1], BCCOFFSET, EPSILONT);
    EXPECT_NEAR(coordinates[2], BCCOFFSET, EPSILONT);
    imageBCC1->getCoordinates(82, coordinates);
    EXPECT_NEAR(coordinates[0], BCCOFFSET + 4 * BCCSQFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(coordinates[1], BCCOFFSET + 3 * BCCSQFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(coordinates[2], BCCOFFSET + BCCSQFACEDISTANCE, EPSILONT);
    imageBCC1->getCoordinates(112, coordinates);
    EXPECT_NEAR(coordinates[0], BCCOFFSET + 9 * BCCOFFSET, EPSILONT);
    EXPECT_NEAR(coordinates[1], BCCOFFSET + 7 * BCCOFFSET, EPSILONT);
    EXPECT_NEAR(coordinates[2], BCCOFFSET + 3 * BCCOFFSET, EPSILONT);
    imageBCC1->getCoordinates(209, coordinates);
    EXPECT_NEAR(coordinates[0], BCCOFFSET + 5 * BCCSQFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(coordinates[1], BCCOFFSET + 4 * BCCSQFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(coordinates[2], BCCOFFSET + 3 * BCCSQFACEDISTANCE, EPSILONT);

    EXPECT_NEAR(imageFCC1->indexToX(0), FCCOFFSET, EPSILONT);
    EXPECT_NEAR(imageFCC1->indexToY(0), FCCOFFSET, EPSILONT);
    EXPECT_NEAR(imageFCC1->indexToZ(0), FCCOFFSET, EPSILONT);
    EXPECT_NEAR(imageFCC1->indexToX(135), FCCOFFSET + 6 * FCCOFFSET, EPSILONT);
    EXPECT_NEAR(imageFCC1->indexToY(135), FCCOFFSET + FCCPOINTDISTANCE, EPSILONT);
    EXPECT_NEAR(imageFCC1->indexToZ(135), FCCOFFSET + 2 * FCCPOINTDISTANCE, EPSILONT);
    EXPECT_NEAR(imageFCC1->indexToX(80), FCCOFFSET + 5 * FCCOFFSET, EPSILONT);
    EXPECT_NEAR(imageFCC1->indexToY(80), FCCOFFSET + 3 * FCCOFFSET, EPSILONT);
    EXPECT_NEAR(imageFCC1->indexToZ(80), FCCOFFSET + 2 * FCCOFFSET, EPSILONT);
    EXPECT_NEAR(imageFCC1->indexToX(105), FCCOFFSET + 7 * FCCOFFSET, EPSILONT);
    EXPECT_NEAR(imageFCC1->indexToY(105), FCCOFFSET + 2 * FCCOFFSET, EPSILONT);
    EXPECT_NEAR(imageFCC1->indexToZ(105), FCCOFFSET + 3 * FCCOFFSET, EPSILONT);
    EXPECT_NEAR(imageFCC1->indexToX(110), FCCOFFSET + 4 * FCCOFFSET, EPSILONT);
    EXPECT_NEAR(imageFCC1->indexToY(110), FCCOFFSET + 3 * FCCOFFSET, EPSILONT);
    EXPECT_NEAR(imageFCC1->indexToZ(110), FCCOFFSET + 3 * FCCOFFSET, EPSILONT);
    EXPECT_NEAR(imageFCC1->indexToX(209), FCCOFFSET + 10 * FCCOFFSET, EPSILONT);
    EXPECT_NEAR(imageFCC1->indexToY(209), FCCOFFSET + 4 * FCCOFFSET, EPSILONT);
    EXPECT_NEAR(imageFCC1->indexToZ(209), FCCOFFSET + 6 * FCCOFFSET, EPSILONT);

    imageFCC1->getCoordinates(0, coordinates);
    EXPECT_NEAR(coordinates[0], FCCOFFSET, EPSILONT);
    EXPECT_NEAR(coordinates[1], FCCOFFSET, EPSILONT);
    EXPECT_NEAR(coordinates[2], FCCOFFSET, EPSILONT);
    imageFCC1->getCoordinates(135, coordinates);
    EXPECT_NEAR(coordinates[0], FCCOFFSET + 6 * FCCOFFSET, EPSILONT);
    EXPECT_NEAR(coordinates[1], FCCOFFSET + FCCPOINTDISTANCE, EPSILONT);
    EXPECT_NEAR(coordinates[2], FCCOFFSET + 2 * FCCPOINTDISTANCE, EPSILONT);
    imageFCC1->getCoordinates(209, coordinates);
    EXPECT_NEAR(coordinates[0], FCCOFFSET + 10 * FCCOFFSET, EPSILONT);
    EXPECT_NEAR(coordinates[1], FCCOFFSET + 4 * FCCOFFSET, EPSILONT);
    EXPECT_NEAR(coordinates[2], FCCOFFSET + 6 * FCCOFFSET, EPSILONT);

    // coordinates, non-unit scale
    EXPECT_NEAR(imageCC2->indexToX(0), 0.5 * scaleFactor2, EPSILONT);
    EXPECT_NEAR(imageCC2->indexToY(0), 0.5 * scaleFactor2, EPSILONT);
    EXPECT_NEAR(imageCC2->indexToZ(0), 0.5 * scaleFactor2, EPSILONT);
    EXPECT_NEAR(imageCC2->indexToX(170), (0.5 + 2) * scaleFactor2, EPSILONT);
    EXPECT_NEAR(imageCC2->indexToY(170), (0.5 + 3) * scaleFactor2, EPSILONT);
    EXPECT_NEAR(imageCC2->indexToZ(170), (0.5 + 5) * scaleFactor2, EPSILONT);
    EXPECT_NEAR(imageCC2->indexToX(209), (0.5 + 5) * scaleFactor2, EPSILONT);
    EXPECT_NEAR(imageCC2->indexToY(209), (0.5 + 4) * scaleFactor2, EPSILONT);
    EXPECT_NEAR(imageCC2->indexToZ(209), (0.5 + 6) * scaleFactor2, EPSILONT);
    EXPECT_NEAR(imageCC2->indexToX(nElements - 1), (0.5 + (nColumns - 1)) * scaleFactor2, EPSILONT);
    EXPECT_NEAR(imageCC2->indexToY(nElements - 1), (0.5 + (nRows - 1)) * scaleFactor2, EPSILONT);
    EXPECT_NEAR(imageCC2->indexToZ(nElements - 1), (0.5 + (nLayers - 1)) * scaleFactor2, EPSILONT);

    EXPECT_NEAR(imageBCC2->indexToX(0), scaleFactor2 * (BCCOFFSET), EPSILONT);
    EXPECT_NEAR(imageBCC2->indexToY(0), scaleFactor2 * (BCCOFFSET), EPSILONT);
    EXPECT_NEAR(imageBCC2->indexToZ(0), scaleFactor2 * (BCCOFFSET), EPSILONT);
    EXPECT_NEAR(imageBCC2->indexToX(82), scaleFactor2 * (BCCOFFSET + 4 * BCCSQFACEDISTANCE), EPSILONT);
    EXPECT_NEAR(imageBCC2->indexToY(82), scaleFactor2 * (BCCOFFSET + 3 * BCCSQFACEDISTANCE), EPSILONT);
    EXPECT_NEAR(imageBCC2->indexToZ(82), scaleFactor2 * (BCCOFFSET + BCCSQFACEDISTANCE), EPSILONT);
    EXPECT_NEAR(imageBCC2->indexToX(112), scaleFactor2 * (BCCOFFSET + 9 * BCCOFFSET), EPSILONT);
    EXPECT_NEAR(imageBCC2->indexToY(112), scaleFactor2 * (BCCOFFSET + 7 * BCCOFFSET), EPSILONT);
    EXPECT_NEAR(imageBCC2->indexToZ(112), scaleFactor2 * (BCCOFFSET + 3 * BCCOFFSET), EPSILONT);
    EXPECT_NEAR(imageBCC2->indexToX(209), scaleFactor2 * (BCCOFFSET + 5 * BCCSQFACEDISTANCE), EPSILONT);
    EXPECT_NEAR(imageBCC2->indexToY(209), scaleFactor2 * (BCCOFFSET + 4 * BCCSQFACEDISTANCE), EPSILONT); // !!!!!!
    EXPECT_NEAR(imageBCC2->indexToZ(209), scaleFactor2 * (BCCOFFSET + 3 * BCCSQFACEDISTANCE), EPSILONT);

    EXPECT_NEAR(imageFCC2->indexToX(0), scaleFactor2 * FCCOFFSET, EPSILONT);
    EXPECT_NEAR(imageFCC2->indexToY(0), scaleFactor2 * FCCOFFSET, EPSILONT);
    EXPECT_NEAR(imageFCC2->indexToZ(0), scaleFactor2 * FCCOFFSET, EPSILONT);
    EXPECT_NEAR(imageFCC2->indexToX(135), scaleFactor2 * (FCCOFFSET + 6 * FCCOFFSET), EPSILONT);
    EXPECT_NEAR(imageFCC2->indexToY(135), scaleFactor2 * (FCCOFFSET + FCCPOINTDISTANCE), EPSILONT);
    EXPECT_NEAR(imageFCC2->indexToZ(135), scaleFactor2 * (FCCOFFSET + 2 * FCCPOINTDISTANCE), EPSILONT);
    EXPECT_NEAR(imageFCC2->indexToX(80), scaleFactor2 * (FCCOFFSET + 5 * FCCOFFSET), EPSILONT);
    EXPECT_NEAR(imageFCC2->indexToY(80), scaleFactor2 * (FCCOFFSET + 3 * FCCOFFSET), EPSILONT);
    EXPECT_NEAR(imageFCC2->indexToZ(80), scaleFactor2 * (FCCOFFSET + 2 * FCCOFFSET), EPSILONT);
    EXPECT_NEAR(imageFCC2->indexToX(105), scaleFactor2 * (FCCOFFSET + 7 * FCCOFFSET), EPSILONT);
    EXPECT_NEAR(imageFCC2->indexToY(105), scaleFactor2 * (FCCOFFSET + 2 * FCCOFFSET), EPSILONT);
    EXPECT_NEAR(imageFCC2->indexToZ(105), scaleFactor2 * (FCCOFFSET + 3 * FCCOFFSET), EPSILONT);
    EXPECT_NEAR(imageFCC2->indexToX(110), scaleFactor2 * (FCCOFFSET + 4 * FCCOFFSET), EPSILONT);
    EXPECT_NEAR(imageFCC2->indexToY(110), scaleFactor2 * (FCCOFFSET + 3 * FCCOFFSET), EPSILONT);
    EXPECT_NEAR(imageFCC2->indexToZ(110), scaleFactor2 * (FCCOFFSET + 3 * FCCOFFSET), EPSILONT);
    EXPECT_NEAR(imageFCC2->indexToX(209), scaleFactor2 * (FCCOFFSET + 10 * FCCOFFSET), EPSILONT);
    EXPECT_NEAR(imageFCC2->indexToY(209), scaleFactor2 * (FCCOFFSET + 4 * FCCOFFSET), EPSILONT);
    EXPECT_NEAR(imageFCC2->indexToZ(209), scaleFactor2 * (FCCOFFSET + 6 * FCCOFFSET), EPSILONT);

    // comparison of different lattices
    EXPECT_GT(fabs(imageCC1->indexToX(170) - imageBCC1->indexToX(170)), EPSILONT);
    EXPECT_GT(fabs(imageCC1->indexToY(170) - imageBCC1->indexToY(170)), EPSILONT);
    EXPECT_GT(fabs(imageCC1->indexToZ(170) - imageBCC1->indexToZ(170)), EPSILONT);
    EXPECT_GT(fabs(imageCC1->indexToX(209) - imageBCC1->indexToX(209)), EPSILONT);
    EXPECT_GT(fabs(imageCC1->indexToY(209) - imageBCC1->indexToY(209)), EPSILONT);
    EXPECT_GT(fabs(imageCC1->indexToZ(209) - imageBCC1->indexToZ(209)), EPSILONT);
    EXPECT_GT(fabs(imageCC1->indexToX(nElements - 1) - imageBCC1->indexToX(nElements - 1)), EPSILONT);
    EXPECT_GT(fabs(imageCC1->indexToY(nElements - 1) - imageBCC1->indexToY(nElements - 1)), EPSILONT);
    EXPECT_GT(fabs(imageCC1->indexToZ(nElements - 1) - imageBCC1->indexToZ(nElements - 1)), EPSILONT);

    EXPECT_GT(fabs(imageCC1->indexToX(170) - imageFCC1->indexToX(170)), EPSILONT);
    EXPECT_GT(fabs(imageCC1->indexToY(170) - imageFCC1->indexToY(170)), EPSILONT);
    EXPECT_GT(fabs(imageCC1->indexToZ(170) - imageFCC1->indexToZ(170)), EPSILONT);
    EXPECT_GT(fabs(imageCC1->indexToX(209) - imageFCC1->indexToX(209)), EPSILONT);
    EXPECT_GT(fabs(imageCC1->indexToY(209) - imageFCC1->indexToY(209)), EPSILONT);
    EXPECT_GT(fabs(imageCC1->indexToZ(209) - imageFCC1->indexToZ(209)), EPSILONT);
    EXPECT_GT(fabs(imageCC1->indexToX(nElements - 1) - imageFCC1->indexToX(nElements - 1)), EPSILONT);
    EXPECT_GT(fabs(imageCC1->indexToY(nElements - 1) - imageFCC1->indexToY(nElements - 1)), EPSILONT);
    EXPECT_GT(fabs(imageCC1->indexToZ(nElements - 1) - imageFCC1->indexToZ(nElements - 1)), EPSILONT);

    EXPECT_GT(fabs(imageBCC1->indexToX(170) - imageFCC1->indexToX(170)), EPSILONT);
    EXPECT_GT(fabs(imageBCC1->indexToY(170) - imageFCC1->indexToY(170)), EPSILONT);
    EXPECT_GT(fabs(imageBCC1->indexToZ(170) - imageFCC1->indexToZ(170)), EPSILONT);
    EXPECT_GT(fabs(imageBCC1->indexToX(209) - imageFCC1->indexToX(209)), EPSILONT);
    EXPECT_GT(fabs(imageBCC1->indexToY(209) - imageFCC1->indexToY(209)), EPSILONT);
    EXPECT_GT(fabs(imageBCC1->indexToZ(209) - imageFCC1->indexToZ(209)), EPSILONT);
    EXPECT_GT(fabs(imageBCC1->indexToX(nElements - 1) - imageFCC1->indexToX(nElements - 1)), EPSILONT);
    EXPECT_GT(fabs(imageBCC1->indexToY(nElements - 1) - imageFCC1->indexToY(nElements - 1)), EPSILONT);
    EXPECT_GT(fabs(imageBCC1->indexToZ(nElements - 1) - imageFCC1->indexToZ(nElements - 1)), EPSILONT);

    // width, height and depth
    EXPECT_NEAR(imageCC1->getWidth(), 6, EPSILONT);
    EXPECT_NEAR(imageCC1->getHeight(), 5, EPSILONT);
    EXPECT_NEAR(imageCC1->getDepth(), 7, EPSILONT);
    EXPECT_NEAR(imageCC2->getWidth(), scaleFactor2 * 6, EPSILONT);
    EXPECT_NEAR(imageCC2->getHeight(), scaleFactor2 * 5, EPSILONT);
    EXPECT_NEAR(imageCC2->getDepth(), scaleFactor2 * 7, EPSILONT);

    EXPECT_NEAR(imageBCC1->getWidth(), 6.5 * BCCSQFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageBCC1->getHeight(), 5.5 * BCCSQFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageBCC1->getDepth(), 4 * BCCSQFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageBCC2->getWidth(), scaleFactor2 * 6.5 * BCCSQFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageBCC2->getHeight(), scaleFactor2 * 5.5 * BCCSQFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageBCC2->getDepth(), scaleFactor2 * 4 * BCCSQFACEDISTANCE, EPSILONT);

    Lattice *extractedCCLattice1, *extractedCCLattice2, *extractedBCCLattice, *extractedFCCLattice;
    extractedCCLattice1 = &(imageCC1->getLattice());
    extractedCCLattice2 = &(imageCC2->getLattice());
    extractedBCCLattice = &(imageBCC1->getLattice());
    extractedFCCLattice = &(imageFCC1->getLattice());
    EXPECT_GT(fabs(extractedCCLattice1->getScaleFactor() - extractedCCLattice2->getScaleFactor()), EPSILONT);
    EXPECT_GT(fabs(extractedCCLattice1->getWidth() - extractedCCLattice2->getWidth()), EPSILONT);
    EXPECT_GT(fabs(extractedCCLattice1->getWidth() - extractedBCCLattice->getWidth()), EPSILONT);
    EXPECT_GT(fabs(extractedCCLattice1->getWidth() - extractedFCCLattice->getWidth()), EPSILONT);
    EXPECT_GT(fabs(extractedBCCLattice->getWidth() - extractedFCCLattice->getWidth()), EPSILONT);
    EXPECT_NEAR(extractedCCLattice1->getScaleFactor(), latticeCC1->getScaleFactor(), EPSILONT);
    EXPECT_NEAR(extractedCCLattice1->getWidth(), latticeCC1->getWidth(), EPSILONT);
    EXPECT_NEAR(extractedCCLattice1->getHeight(), latticeCC1->getHeight(), EPSILONT);
    EXPECT_NEAR(extractedCCLattice1->getDepth(), latticeCC1->getDepth(), EPSILONT);
    EXPECT_NEAR(extractedCCLattice2->getScaleFactor(), latticeCC2->getScaleFactor(), EPSILONT);
    EXPECT_NEAR(extractedCCLattice2->getWidth(), latticeCC2->getWidth(), EPSILONT);
    EXPECT_NEAR(extractedCCLattice2->getHeight(), latticeCC2->getHeight(), EPSILONT);
    EXPECT_NEAR(extractedCCLattice2->getDepth(), latticeCC2->getDepth(), EPSILONT);
    EXPECT_NEAR(extractedBCCLattice->getScaleFactor(), latticeBCC1->getScaleFactor(), EPSILONT);
    EXPECT_NEAR(extractedBCCLattice->getWidth(), latticeBCC1->getWidth(), EPSILONT);
    EXPECT_NEAR(extractedBCCLattice->getHeight(), latticeBCC1->getHeight(), EPSILONT);
    EXPECT_NEAR(extractedBCCLattice->getDepth(), latticeBCC1->getDepth(), EPSILONT);
    EXPECT_NEAR(extractedFCCLattice->getScaleFactor(), latticeFCC1->getScaleFactor(), EPSILONT);
    EXPECT_NEAR(extractedFCCLattice->getWidth(), latticeFCC1->getWidth(), EPSILONT);
    EXPECT_NEAR(extractedFCCLattice->getHeight(), latticeFCC1->getHeight(), EPSILONT);
    EXPECT_NEAR(extractedFCCLattice->getDepth(), latticeFCC1->getDepth(), EPSILONT);

    delete latticeCC1;
    delete latticeCC2;
    delete latticeBCC1;
    delete latticeBCC2;
    delete latticeFCC1;
    delete latticeFCC2;
    delete imageCC1;
    delete imageCC2;
    delete imageBCC1;
    delete imageBCC2;
    delete imageFCC1;
    delete imageFCC2;

}

TEST(Image, distancesCC) {

    int nRows = 5;
    int nColumns = 6;
    int nLayers = 7;
    int nElements = nRows * nColumns * nLayers;
    double scaleFactor1 = 1.0;
    double scaleFactor2 = cbrt(2.5);
    CCLattice *latticeCC1 = new CCLattice(nRows, nColumns, nLayers, scaleFactor1);
    CCLattice *latticeCC2 = new CCLattice(nRows, nColumns, nLayers, scaleFactor2);
    int nBands = 1;
    uint8 data[nElements];
    for (int i = 0; i < nElements; i++) {
        data[i] = 0;
    }
    Image<uint8> *imageCC1 = new Image<uint8>(data, *latticeCC1, nBands);
    Image<uint8> *imageCC2 = new Image<uint8>(data, *latticeCC2, nBands);

    // distance between spels
    EXPECT_NEAR(imageCC1->euclideanDistance(0, 0), 0, EPSILONT);
    EXPECT_NEAR(imageCC1->euclideanDistance(170, 170), 0, EPSILONT);
    EXPECT_NEAR(imageCC1->euclideanDistance(nElements - 1, nElements - 1), 0, EPSILONT);
    EXPECT_NEAR(imageCC1->euclideanDistance(103, 104), 1, EPSILONT);
    EXPECT_NEAR(imageCC1->euclideanDistance(103, 104), imageCC1->euclideanDistance(104, 103), EPSILONT);
    EXPECT_NEAR(imageCC1->euclideanDistance(103, 97), 1, EPSILONT);
    EXPECT_NEAR(imageCC1->euclideanDistance(103, 97), imageCC1->euclideanDistance(97, 103), EPSILONT);
    EXPECT_NEAR(imageCC1->euclideanDistance(103, 73), 1, EPSILONT);
    EXPECT_NEAR(imageCC1->euclideanDistance(103, 73), imageCC1->euclideanDistance(73, 103), EPSILONT);
    EXPECT_NEAR(imageCC1->euclideanDistance(103, 110), 1.41421356237, EPSILONT);
    EXPECT_NEAR(imageCC1->euclideanDistance(103, 110), imageCC1->euclideanDistance(110, 103), EPSILONT);
    EXPECT_NEAR(imageCC1->euclideanDistance(103, 98), 1.41421356237, EPSILONT);
    EXPECT_NEAR(imageCC1->euclideanDistance(103, 98), imageCC1->euclideanDistance(98, 103), EPSILONT);
    EXPECT_NEAR(imageCC1->euclideanDistance(103, 67), 1.41421356237, EPSILONT);
    EXPECT_NEAR(imageCC1->euclideanDistance(103, 67), imageCC1->euclideanDistance(67, 103), EPSILONT);
    EXPECT_NEAR(imageCC1->euclideanDistance(103, 79), 1.41421356237, EPSILONT);
    EXPECT_NEAR(imageCC1->euclideanDistance(103, 79), imageCC1->euclideanDistance(79, 103), EPSILONT);

    EXPECT_NEAR(imageCC2->euclideanDistance(0, 0), 0, EPSILONT);
    EXPECT_NEAR(imageCC2->euclideanDistance(170, 170), 0, EPSILONT);
    EXPECT_NEAR(imageCC2->euclideanDistance(nElements - 1, nElements - 1), 0, EPSILONT);
    EXPECT_NEAR(imageCC2->euclideanDistance(103, 104), 1 * scaleFactor2, EPSILONT);
    EXPECT_NEAR(imageCC2->euclideanDistance(103, 104), imageCC2->euclideanDistance(104, 103), EPSILONT);
    EXPECT_NEAR(imageCC2->euclideanDistance(103, 97), 1 * scaleFactor2, EPSILONT);
    EXPECT_NEAR(imageCC2->euclideanDistance(103, 97), imageCC2->euclideanDistance(97, 103), EPSILONT);
    EXPECT_NEAR(imageCC2->euclideanDistance(103, 73), 1 * scaleFactor2, EPSILONT);
    EXPECT_NEAR(imageCC2->euclideanDistance(103, 73), imageCC2->euclideanDistance(73, 103), EPSILONT);
    EXPECT_NEAR(imageCC2->euclideanDistance(103, 110), sqrt(scaleFactor2 * scaleFactor2 * 2), EPSILONT);
    EXPECT_NEAR(imageCC2->euclideanDistance(103, 110), imageCC2->euclideanDistance(110, 103), EPSILONT);
    EXPECT_NEAR(imageCC2->euclideanDistance(103, 98), sqrt(scaleFactor2 * scaleFactor2 * 2), EPSILONT);
    EXPECT_NEAR(imageCC2->euclideanDistance(103, 98), imageCC2->euclideanDistance(98, 103), EPSILONT);
    EXPECT_NEAR(imageCC2->euclideanDistance(103, 67), sqrt(scaleFactor2 * scaleFactor2 * 2), EPSILONT);
    EXPECT_NEAR(imageCC2->euclideanDistance(103, 67), imageCC2->euclideanDistance(67, 103), EPSILONT);
    EXPECT_NEAR(imageCC2->euclideanDistance(103, 79), sqrt(scaleFactor2 * scaleFactor2 * 2), EPSILONT);
    EXPECT_NEAR(imageCC2->euclideanDistance(103, 79), imageCC2->euclideanDistance(79, 103), EPSILONT);

    // distance vector between spels
    vector<double> distanceVector;
    double xyz100CC1[3] = {1, 0, 0};
    double xyz010CC1[3] = {0, 1, 0};
    double xyz001CC1[3] = {0, 0, 1};
    double xyz123CC1[3] = {1, 2, 3};
    imageCC1->euclideanDistanceVector(103, 103, distanceVector);
    EXPECT_TRUE(fabs(distanceVector[0]) < EPSILONT);
    EXPECT_TRUE(fabs(distanceVector[1]) < EPSILONT);
    EXPECT_TRUE(fabs(distanceVector[2]) < EPSILONT);
    imageCC1->euclideanDistanceVector(103, 104, distanceVector);
    EXPECT_NEAR(distanceVector[0], xyz100CC1[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], xyz100CC1[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], xyz100CC1[2], EPSILONT);
    imageCC1->euclideanDistanceVector(103, 109, distanceVector);
    EXPECT_NEAR(distanceVector[0], xyz010CC1[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], xyz010CC1[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], xyz010CC1[2], EPSILONT);
    imageCC1->euclideanDistanceVector(73, 103, distanceVector);
    EXPECT_NEAR(distanceVector[0], xyz001CC1[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], xyz001CC1[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], xyz001CC1[2], EPSILONT);
    imageCC1->euclideanDistanceVector(13, 116, distanceVector);
    EXPECT_NEAR(distanceVector[0], xyz123CC1[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], xyz123CC1[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], xyz123CC1[2], EPSILONT);

    double xyz100CC2[3] = {1 * scaleFactor2, 0, 0};
    double xyz010CC2[3] = {0, 1 * scaleFactor2, 0};
    double xyz001CC2[3] = {0, 0, 1 * scaleFactor2};
    double xyz123CC2[3] = {1 * scaleFactor2, 2 * scaleFactor2, 3 * scaleFactor2};
    imageCC2->euclideanDistanceVector(103, 103, distanceVector);
    EXPECT_TRUE(fabs(distanceVector[0]) < EPSILONT);
    EXPECT_TRUE(fabs(distanceVector[1]) < EPSILONT);
    EXPECT_TRUE(fabs(distanceVector[2]) < EPSILONT);
    imageCC2->euclideanDistanceVector(103, 104, distanceVector);
    EXPECT_NEAR(distanceVector[0], xyz100CC2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], xyz100CC2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], xyz100CC2[2], EPSILONT);
    imageCC2->euclideanDistanceVector(103, 109, distanceVector);
    EXPECT_NEAR(distanceVector[0], xyz010CC2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], xyz010CC2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], xyz010CC2[2], EPSILONT);
    imageCC2->euclideanDistanceVector(73, 103, distanceVector);
    EXPECT_NEAR(distanceVector[0], xyz001CC2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], xyz001CC2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], xyz001CC2[2], EPSILONT);
    imageCC2->euclideanDistanceVector(13, 116, distanceVector);
    EXPECT_NEAR(distanceVector[0], xyz123CC2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], xyz123CC2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], xyz123CC2[2], EPSILONT);

    delete latticeCC1;
    delete latticeCC2;
    delete imageCC1;
    delete imageCC2;
    
}

TEST(Image, distancesBCC) {

    int nRows = 5;
    int nColumns = 6;
    int nLayers = 7;
    int nElements = nRows * nColumns * nLayers;
    double scaleFactor1 = 1.0;
    double scaleFactor2 = cbrt(2.5);
    BCCLattice *latticeBCC1 = new BCCLattice(nRows, nColumns, nLayers, scaleFactor1);
    BCCLattice *latticeBCC2 = new BCCLattice(nRows, nColumns, nLayers, scaleFactor2);
    int nBands = 1;
    uint8 data[nElements];
    for (int i = 0; i < nElements; i++) {
        data[i] = 0;
    }
    Image<uint8> *imageBCC1 = new Image<uint8>(data, *latticeBCC1, nBands);
    Image<uint8> *imageBCC2 = new Image<uint8>(data, *latticeBCC2, nBands);

    // distance between spels
    EXPECT_NEAR(imageBCC1->euclideanDistance(0, 0), 0, EPSILONT);
    EXPECT_NEAR(imageBCC1->euclideanDistance(170, 170), 0, EPSILONT);
    EXPECT_NEAR(imageBCC1->euclideanDistance(nElements - 1, nElements - 1), 0, EPSILONT);
    EXPECT_NEAR(imageBCC1->euclideanDistance(82, 45), BCCHEXFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageBCC1->euclideanDistance(82, 45), imageBCC1->euclideanDistance(45, 82), EPSILONT);
    EXPECT_NEAR(imageBCC1->euclideanDistance(82, 46), BCCHEXFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageBCC1->euclideanDistance(82, 46), imageBCC1->euclideanDistance(46, 82), EPSILONT);
    EXPECT_NEAR(imageBCC1->euclideanDistance(82, 51), BCCHEXFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageBCC1->euclideanDistance(82, 51), imageBCC1->euclideanDistance(51, 82), EPSILONT);
    EXPECT_NEAR(imageBCC1->euclideanDistance(82, 52), BCCHEXFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageBCC1->euclideanDistance(82, 52), imageBCC1->euclideanDistance(52, 82), EPSILONT);
    EXPECT_NEAR(imageBCC1->euclideanDistance(82, 22), BCCSQFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageBCC1->euclideanDistance(82, 22), imageBCC1->euclideanDistance(22, 82), EPSILONT);
    EXPECT_NEAR(imageBCC1->euclideanDistance(82, 76), BCCSQFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageBCC1->euclideanDistance(82, 76), imageBCC1->euclideanDistance(76, 82), EPSILONT);
    EXPECT_NEAR(imageBCC1->euclideanDistance(82, 83), BCCSQFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageBCC1->euclideanDistance(82, 83), imageBCC1->euclideanDistance(83, 82), EPSILONT);

    EXPECT_NEAR(imageBCC2->euclideanDistance(0, 0), 0, EPSILONT);
    EXPECT_NEAR(imageBCC2->euclideanDistance(170, 170), 0, EPSILONT);
    EXPECT_NEAR(imageBCC2->euclideanDistance(nElements - 1, nElements - 1), 0, EPSILONT);
    EXPECT_NEAR(imageBCC2->euclideanDistance(82, 45), scaleFactor2 * BCCHEXFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageBCC2->euclideanDistance(82, 45), imageBCC2->euclideanDistance(45, 82), EPSILONT);
    EXPECT_NEAR(imageBCC2->euclideanDistance(82, 46), scaleFactor2 * BCCHEXFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageBCC2->euclideanDistance(82, 46), imageBCC2->euclideanDistance(46, 82), EPSILONT);
    EXPECT_NEAR(imageBCC2->euclideanDistance(82, 51), scaleFactor2 * BCCHEXFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageBCC2->euclideanDistance(82, 51), imageBCC2->euclideanDistance(51, 82), EPSILONT);
    EXPECT_NEAR(imageBCC2->euclideanDistance(82, 52), scaleFactor2 * BCCHEXFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageBCC2->euclideanDistance(82, 52), imageBCC2->euclideanDistance(52, 82), EPSILONT);
    EXPECT_NEAR(imageBCC2->euclideanDistance(82, 22), scaleFactor2 * BCCSQFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageBCC2->euclideanDistance(82, 22), imageBCC2->euclideanDistance(22, 82), EPSILONT);
    EXPECT_NEAR(imageBCC2->euclideanDistance(82, 76), scaleFactor2 * BCCSQFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageBCC2->euclideanDistance(82, 76), imageBCC2->euclideanDistance(76, 82), EPSILONT);
    EXPECT_NEAR(imageBCC2->euclideanDistance(82, 83), scaleFactor2 * BCCSQFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageBCC2->euclideanDistance(82, 83), imageBCC2->euclideanDistance(83, 82), EPSILONT);


    vector<double> distanceVector;
    double right[3] = {BCCSQFACEDISTANCE, 0, 0};
    double bottom[3] = {0, BCCSQFACEDISTANCE, 0};
    double back[3] = {0, 0, BCCSQFACEDISTANCE};
    double left[3] = {-BCCSQFACEDISTANCE, 0, 0};
    double top[3] = {0, -BCCSQFACEDISTANCE, 0};
    double front[3] = {0, 0, -BCCSQFACEDISTANCE};
    double ftl[3] = {-BCCOFFSET, -BCCOFFSET, -BCCOFFSET};
    double ftr[3] = {BCCOFFSET, -BCCOFFSET, -BCCOFFSET};
    double fbl[3] = {-BCCOFFSET, BCCOFFSET, -BCCOFFSET};
    double fbr[3] = {BCCOFFSET, BCCOFFSET, -BCCOFFSET};
    double btl[3] = {-BCCOFFSET, -BCCOFFSET, BCCOFFSET};
    double btr[3] = {BCCOFFSET, -BCCOFFSET, BCCOFFSET};
    double bbl[3] = {-BCCOFFSET, BCCOFFSET, BCCOFFSET};
    double bbr[3] = {BCCOFFSET, BCCOFFSET, BCCOFFSET};
    imageBCC1->euclideanDistanceVector(82, 82, distanceVector);
    EXPECT_TRUE(fabs(distanceVector[0]) < EPSILONT);
    EXPECT_TRUE(fabs(distanceVector[1]) < EPSILONT);
    EXPECT_TRUE(fabs(distanceVector[2]) < EPSILONT);
    imageBCC1->euclideanDistanceVector(82, 83, distanceVector);
    EXPECT_NEAR(distanceVector[0], right[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], right[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], right[2], EPSILONT);
    imageBCC1->euclideanDistanceVector(82, 88, distanceVector);
    EXPECT_NEAR(distanceVector[0], bottom[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], bottom[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], bottom[2], EPSILONT);
    imageBCC1->euclideanDistanceVector(22, 82, distanceVector);
    EXPECT_NEAR(distanceVector[0], back[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], back[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], back[2], EPSILONT);
    imageBCC1->euclideanDistanceVector(83, 82, distanceVector);
    EXPECT_NEAR(distanceVector[0], left[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], left[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], left[2], EPSILONT);
    imageBCC1->euclideanDistanceVector(88, 82, distanceVector);
    EXPECT_NEAR(distanceVector[0], top[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], top[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], top[2], EPSILONT);
    imageBCC1->euclideanDistanceVector(82, 22, distanceVector);
    EXPECT_NEAR(distanceVector[0], front[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], front[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], front[2], EPSILONT);
    imageBCC1->euclideanDistanceVector(82, 45, distanceVector);
    EXPECT_NEAR(distanceVector[0], ftl[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], ftl[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], ftl[2], EPSILONT);
    imageBCC1->euclideanDistanceVector(82, 46, distanceVector);
    EXPECT_NEAR(distanceVector[0], ftr[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], ftr[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], ftr[2], EPSILONT);
    imageBCC1->euclideanDistanceVector(82, 51, distanceVector);
    EXPECT_NEAR(distanceVector[0], fbl[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], fbl[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], fbl[2], EPSILONT);
    imageBCC1->euclideanDistanceVector(82, 52, distanceVector);
    EXPECT_NEAR(distanceVector[0], fbr[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], fbr[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], fbr[2], EPSILONT);
    imageBCC1->euclideanDistanceVector(82, 105, distanceVector);
    EXPECT_NEAR(distanceVector[0], btl[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], btl[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], btl[2], EPSILONT);
    imageBCC1->euclideanDistanceVector(82, 106, distanceVector);
    EXPECT_NEAR(distanceVector[0], btr[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], btr[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], btr[2], EPSILONT);
    imageBCC1->euclideanDistanceVector(82, 111, distanceVector);
    EXPECT_NEAR(distanceVector[0], bbl[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], bbl[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], bbl[2], EPSILONT);
    imageBCC1->euclideanDistanceVector(82, 112, distanceVector);
    EXPECT_NEAR(distanceVector[0], bbr[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], bbr[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], bbr[2], EPSILONT);

    double right2[3] = {scaleFactor2 * BCCSQFACEDISTANCE, 0, 0};
    double bottom2[3] = {0, scaleFactor2 * BCCSQFACEDISTANCE, 0};
    double back2[3] = {0, 0, scaleFactor2 * BCCSQFACEDISTANCE};
    double left2[3] = {-scaleFactor2 * BCCSQFACEDISTANCE, 0, 0};
    double top2[3] = {0, -scaleFactor2 * BCCSQFACEDISTANCE, 0};
    double front2[3] = {0, 0, -scaleFactor2 * BCCSQFACEDISTANCE};
    double ftl2[3] = {-scaleFactor2 * BCCOFFSET, -scaleFactor2 * BCCOFFSET, -scaleFactor2 * BCCOFFSET};
    double ftr2[3] = {scaleFactor2 * BCCOFFSET, -scaleFactor2 * BCCOFFSET, -scaleFactor2 * BCCOFFSET};
    double fbl2[3] = {-scaleFactor2 * BCCOFFSET, scaleFactor2 * BCCOFFSET, -scaleFactor2 * BCCOFFSET};
    double fbr2[3] = {scaleFactor2 * BCCOFFSET, scaleFactor2 * BCCOFFSET, -scaleFactor2 * BCCOFFSET};
    double btl2[3] = {-scaleFactor2 * BCCOFFSET, -scaleFactor2 * BCCOFFSET, scaleFactor2 * BCCOFFSET};
    double btr2[3] = {scaleFactor2 * BCCOFFSET, -scaleFactor2 * BCCOFFSET, scaleFactor2 * BCCOFFSET};
    double bbl2[3] = {-scaleFactor2 * BCCOFFSET, scaleFactor2 * BCCOFFSET, scaleFactor2 * BCCOFFSET};
    double bbr2[3] = {scaleFactor2 * BCCOFFSET, scaleFactor2 * BCCOFFSET, scaleFactor2 * BCCOFFSET};
    imageBCC2->euclideanDistanceVector(82, 82, distanceVector);
    EXPECT_TRUE(fabs(distanceVector[0]) < EPSILONT);
    EXPECT_TRUE(fabs(distanceVector[1]) < EPSILONT);
    EXPECT_TRUE(fabs(distanceVector[2]) < EPSILONT);
    imageBCC2->euclideanDistanceVector(82, 83, distanceVector);
    EXPECT_NEAR(distanceVector[0], right2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], right2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], right2[2], EPSILONT);
    imageBCC2->euclideanDistanceVector(82, 88, distanceVector);
    EXPECT_NEAR(distanceVector[0], bottom2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], bottom2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], bottom2[2], EPSILONT);
    imageBCC2->euclideanDistanceVector(22, 82, distanceVector);
    EXPECT_NEAR(distanceVector[0], back2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], back2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], back2[2], EPSILONT);
    imageBCC2->euclideanDistanceVector(83, 82, distanceVector);
    EXPECT_NEAR(distanceVector[0], left2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], left2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], left2[2], EPSILONT);
    imageBCC2->euclideanDistanceVector(88, 82, distanceVector);
    EXPECT_NEAR(distanceVector[0], top2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], top2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], top2[2], EPSILONT);
    imageBCC2->euclideanDistanceVector(82, 22, distanceVector);
    EXPECT_NEAR(distanceVector[0], front2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], front2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], front2[2], EPSILONT);
    imageBCC2->euclideanDistanceVector(82, 45, distanceVector);
    EXPECT_NEAR(distanceVector[0], ftl2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], ftl2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], ftl2[2], EPSILONT);
    imageBCC2->euclideanDistanceVector(82, 46, distanceVector);
    EXPECT_NEAR(distanceVector[0], ftr2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], ftr2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], ftr2[2], EPSILONT);
    imageBCC2->euclideanDistanceVector(82, 51, distanceVector);
    EXPECT_NEAR(distanceVector[0], fbl2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], fbl2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], fbl2[2], EPSILONT);
    imageBCC2->euclideanDistanceVector(82, 52, distanceVector);
    EXPECT_NEAR(distanceVector[0], fbr2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], fbr2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], fbr2[2], EPSILONT);
    imageBCC2->euclideanDistanceVector(82, 105, distanceVector);
    EXPECT_NEAR(distanceVector[0], btl2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], btl2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], btl2[2], EPSILONT);
    imageBCC2->euclideanDistanceVector(82, 106, distanceVector);
    EXPECT_NEAR(distanceVector[0], btr2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], btr2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], btr2[2], EPSILONT);
    imageBCC2->euclideanDistanceVector(82, 111, distanceVector);
    EXPECT_NEAR(distanceVector[0], bbl2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], bbl2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], bbl2[2], EPSILONT);
    imageBCC2->euclideanDistanceVector(82, 112, distanceVector);
    EXPECT_NEAR(distanceVector[0], bbr2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], bbr2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], bbr2[2], EPSILONT);
    
    delete latticeBCC1;
    delete latticeBCC2;
    delete imageBCC1;
    delete imageBCC2;
}

TEST(Image, distancesFCC) {

    int nRows = 5;
    int nColumns = 6;
    int nLayers = 7;
    int nElements = nRows * nColumns * nLayers;
    double scaleFactor1 = 1.0;
    double scaleFactor2 = cbrt(2.5);
    FCCLattice *latticeFCC1 = new FCCLattice(nRows, nColumns, nLayers, scaleFactor1);
    FCCLattice *latticeFCC2 = new FCCLattice(nRows, nColumns, nLayers, scaleFactor2);
    int nBands = 1;
    uint8 data[nElements];
    for (int i = 0; i < nElements; i++) {
        data[i] = 0;
    }
    Image<uint8> *imageFCC1 = new Image<uint8>(data, *latticeFCC1, nBands);
    Image<uint8> *imageFCC2 = new Image<uint8>(data, *latticeFCC2, nBands);

    // distance between spels
    EXPECT_NEAR(imageFCC1->euclideanDistance(0, 0), 0, EPSILONT);
    EXPECT_NEAR(imageFCC1->euclideanDistance(170, 170), 0, EPSILONT);
    EXPECT_NEAR(imageFCC1->euclideanDistance(nElements - 1, nElements - 1), 0, EPSILONT);
    EXPECT_NEAR(imageFCC1->euclideanDistance(105, 69), FCCFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageFCC1->euclideanDistance(105, 69), imageFCC1->euclideanDistance(69, 105), EPSILONT);
    EXPECT_NEAR(imageFCC1->euclideanDistance(105, 75), FCCFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageFCC1->euclideanDistance(105, 75), imageFCC1->euclideanDistance(75, 105), EPSILONT);
    EXPECT_NEAR(imageFCC1->euclideanDistance(105, 76), FCCFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageFCC1->euclideanDistance(105, 76), imageFCC1->euclideanDistance(76, 105), EPSILONT);
    EXPECT_NEAR(imageFCC1->euclideanDistance(105, 81), FCCFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageFCC1->euclideanDistance(105, 81), imageFCC1->euclideanDistance(81, 105), EPSILONT);
    EXPECT_NEAR(imageFCC1->euclideanDistance(105, 99), FCCFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageFCC1->euclideanDistance(105, 99), imageFCC1->euclideanDistance(99, 105), EPSILONT);
    EXPECT_NEAR(imageFCC1->euclideanDistance(105, 100), FCCFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageFCC1->euclideanDistance(105, 100), imageFCC1->euclideanDistance(100, 105), EPSILONT);
    EXPECT_NEAR(imageFCC1->euclideanDistance(105, 45), FCCPOINTDISTANCE, EPSILONT);
    EXPECT_NEAR(imageFCC1->euclideanDistance(105, 45), imageFCC1->euclideanDistance(45, 105), EPSILONT);
    EXPECT_NEAR(imageFCC1->euclideanDistance(105, 93), FCCPOINTDISTANCE, EPSILONT);
    EXPECT_NEAR(imageFCC1->euclideanDistance(105, 93), imageFCC1->euclideanDistance(93, 105), EPSILONT);
    EXPECT_NEAR(imageFCC1->euclideanDistance(105, 104), FCCPOINTDISTANCE, EPSILONT);
    EXPECT_NEAR(imageFCC1->euclideanDistance(105, 104), imageFCC1->euclideanDistance(104, 105), EPSILONT);

    EXPECT_NEAR(imageFCC2->euclideanDistance(0, 0), 0, EPSILONT);
    EXPECT_NEAR(imageFCC2->euclideanDistance(170, 170), 0, EPSILONT);
    EXPECT_NEAR(imageFCC2->euclideanDistance(nElements - 1, nElements - 1), 0, EPSILONT);
    EXPECT_NEAR(imageFCC2->euclideanDistance(105, 69), scaleFactor2 * FCCFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageFCC2->euclideanDistance(105, 69), imageFCC2->euclideanDistance(69, 105), EPSILONT);
    EXPECT_NEAR(imageFCC2->euclideanDistance(105, 75), scaleFactor2 * FCCFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageFCC2->euclideanDistance(105, 75), imageFCC2->euclideanDistance(75, 105), EPSILONT);
    EXPECT_NEAR(imageFCC2->euclideanDistance(105, 76), scaleFactor2 * FCCFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageFCC2->euclideanDistance(105, 76), imageFCC2->euclideanDistance(76, 105), EPSILONT);
    EXPECT_NEAR(imageFCC2->euclideanDistance(105, 81), scaleFactor2 * FCCFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageFCC2->euclideanDistance(105, 81), imageFCC2->euclideanDistance(81, 105), EPSILONT);
    EXPECT_NEAR(imageFCC2->euclideanDistance(105, 99), scaleFactor2 * FCCFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageFCC2->euclideanDistance(105, 99), imageFCC2->euclideanDistance(99, 105), EPSILONT);
    EXPECT_NEAR(imageFCC2->euclideanDistance(105, 100), scaleFactor2 * FCCFACEDISTANCE, EPSILONT);
    EXPECT_NEAR(imageFCC2->euclideanDistance(105, 100), imageFCC2->euclideanDistance(100, 105), EPSILONT);
    EXPECT_NEAR(imageFCC2->euclideanDistance(105, 45), scaleFactor2 * FCCPOINTDISTANCE, EPSILONT);
    EXPECT_NEAR(imageFCC2->euclideanDistance(105, 45), imageFCC2->euclideanDistance(45, 105), EPSILONT);
    EXPECT_NEAR(imageFCC2->euclideanDistance(105, 93), scaleFactor2 * FCCPOINTDISTANCE, EPSILONT);
    EXPECT_NEAR(imageFCC2->euclideanDistance(105, 93), imageFCC2->euclideanDistance(93, 105), EPSILONT);
    EXPECT_NEAR(imageFCC2->euclideanDistance(105, 104), scaleFactor2 * FCCPOINTDISTANCE, EPSILONT);
    EXPECT_NEAR(imageFCC2->euclideanDistance(105, 104), imageFCC2->euclideanDistance(104, 105), EPSILONT);

    // distance vector between spels
    vector<double> distanceVector;
    double ft[3] = {0, -FCCOFFSET, -FCCOFFSET};
    double fr[3] = {FCCOFFSET, 0, -FCCOFFSET};
    double fb[3] = {0, FCCOFFSET, -FCCOFFSET};
    double fl[3] = {-FCCOFFSET, 0, -FCCOFFSET};
    double mtr[3] = {FCCOFFSET, -FCCOFFSET, 0};
    double mbr[3] = {FCCOFFSET, FCCOFFSET, 0};
    double mbl[3] = {-FCCOFFSET, FCCOFFSET, 0};
    double mtl[3] = {-FCCOFFSET, -FCCOFFSET, 0};
    double bt[3] = {0, -FCCOFFSET, FCCOFFSET};
    double br[3] = {FCCOFFSET, 0, FCCOFFSET};
    double bb[3] = {0, FCCOFFSET, FCCOFFSET};
    double bl[3] = {-FCCOFFSET, 0, FCCOFFSET};
    double front[3] = {0, 0, -FCCPOINTDISTANCE};
    double top[3] = {0, -FCCPOINTDISTANCE, 0};
    double right[3] = {FCCPOINTDISTANCE, 0, 0};
    double bottom[3] = {0, FCCPOINTDISTANCE, 0};
    double left[3] = {-FCCPOINTDISTANCE, 0, 0};
    double back[3] = {0, 0, FCCPOINTDISTANCE};
    imageFCC1->euclideanDistanceVector(82, 82, distanceVector);
    EXPECT_TRUE(fabs(distanceVector[0]) < EPSILONT);
    EXPECT_TRUE(fabs(distanceVector[1]) < EPSILONT);
    EXPECT_TRUE(fabs(distanceVector[2]) < EPSILONT);
    imageFCC1->euclideanDistanceVector(105, 45, distanceVector);
    EXPECT_NEAR(distanceVector[0], front[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], front[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], front[2], EPSILONT);
    imageFCC1->euclideanDistanceVector(105, 93, distanceVector);
    EXPECT_NEAR(distanceVector[0], top[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], top[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], top[2], EPSILONT);
    imageFCC1->euclideanDistanceVector(105, 106, distanceVector);
    EXPECT_NEAR(distanceVector[0], right[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], right[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], right[2], EPSILONT);
    imageFCC1->euclideanDistanceVector(105, 117, distanceVector);
    EXPECT_NEAR(distanceVector[0], bottom[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], bottom[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], bottom[2], EPSILONT);
    imageFCC1->euclideanDistanceVector(105, 104, distanceVector);
    EXPECT_NEAR(distanceVector[0], left[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], left[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], left[2], EPSILONT);
    imageFCC1->euclideanDistanceVector(105, 165, distanceVector);
    EXPECT_NEAR(distanceVector[0], back[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], back[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], back[2], EPSILONT);
    imageFCC1->euclideanDistanceVector(105, 69, distanceVector);
    EXPECT_NEAR(distanceVector[0], ft[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], ft[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], ft[2], EPSILONT);
    imageFCC1->euclideanDistanceVector(105, 76, distanceVector);
    EXPECT_NEAR(distanceVector[0], fr[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], fr[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], fr[2], EPSILONT);
    imageFCC1->euclideanDistanceVector(105, 81, distanceVector);
    EXPECT_NEAR(distanceVector[0], fb[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], fb[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], fb[2], EPSILONT);
    imageFCC1->euclideanDistanceVector(105, 75, distanceVector);
    EXPECT_NEAR(distanceVector[0], fl[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], fl[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], fl[2], EPSILONT);
    imageFCC1->euclideanDistanceVector(105, 100, distanceVector);
    EXPECT_NEAR(distanceVector[0], mtr[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], mtr[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], mtr[2], EPSILONT);
    imageFCC1->euclideanDistanceVector(105, 112, distanceVector);
    EXPECT_NEAR(distanceVector[0], mbr[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], mbr[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], mbr[2], EPSILONT);
    imageFCC1->euclideanDistanceVector(105, 111, distanceVector);
    EXPECT_NEAR(distanceVector[0], mbl[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], mbl[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], mbl[2], EPSILONT);
    imageFCC1->euclideanDistanceVector(105, 99, distanceVector);
    EXPECT_NEAR(distanceVector[0], mtl[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], mtl[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], mtl[2], EPSILONT);
    imageFCC1->euclideanDistanceVector(105, 129, distanceVector);
    EXPECT_NEAR(distanceVector[0], bt[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], bt[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], bt[2], EPSILONT);
    imageFCC1->euclideanDistanceVector(105, 136, distanceVector);
    EXPECT_NEAR(distanceVector[0], br[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], br[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], br[2], EPSILONT);
    imageFCC1->euclideanDistanceVector(105, 141, distanceVector);
    EXPECT_NEAR(distanceVector[0], bb[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], bb[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], bb[2], EPSILONT);
    imageFCC1->euclideanDistanceVector(105, 135, distanceVector);
    EXPECT_NEAR(distanceVector[0], bl[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], bl[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], bl[2], EPSILONT);

    double ft2[3] = {0, -scaleFactor2 * FCCOFFSET, -scaleFactor2 * FCCOFFSET};
    double fr2[3] = {scaleFactor2 * FCCOFFSET, 0, -scaleFactor2 * FCCOFFSET};
    double fb2[3] = {0, scaleFactor2 * FCCOFFSET, -scaleFactor2 * FCCOFFSET};
    double fl2[3] = {-scaleFactor2 * FCCOFFSET, 0, -scaleFactor2 * FCCOFFSET};
    double mtr2[3] = {scaleFactor2 * FCCOFFSET, -scaleFactor2 * FCCOFFSET, 0};
    double mbr2[3] = {scaleFactor2 * FCCOFFSET, scaleFactor2 * FCCOFFSET, 0};
    double mbl2[3] = {-scaleFactor2 * FCCOFFSET, scaleFactor2 * FCCOFFSET, 0};
    double mtl2[3] = {-scaleFactor2 * FCCOFFSET, -scaleFactor2 * FCCOFFSET, 0};
    double bt2[3] = {0, -scaleFactor2 * FCCOFFSET, scaleFactor2 * FCCOFFSET};
    double br2[3] = {scaleFactor2 * FCCOFFSET, 0, scaleFactor2 * FCCOFFSET};
    double bb2[3] = {0, scaleFactor2 * FCCOFFSET, scaleFactor2 * FCCOFFSET};
    double bl2[3] = {-scaleFactor2 * FCCOFFSET, 0, scaleFactor2 * FCCOFFSET};
    double front2[3] = {0, 0, -scaleFactor2 * FCCPOINTDISTANCE};
    double top2[3] = {0, -scaleFactor2 * FCCPOINTDISTANCE, 0};
    double right2[3] = {scaleFactor2 * FCCPOINTDISTANCE, 0, 0};
    double bottom2[3] = {0, scaleFactor2 * FCCPOINTDISTANCE, 0};
    double left2[3] = {-scaleFactor2 * FCCPOINTDISTANCE, 0, 0};
    double back2[3] = {0, 0, scaleFactor2 * FCCPOINTDISTANCE};
    imageFCC2->euclideanDistanceVector(82, 82, distanceVector);
    EXPECT_TRUE(fabs(distanceVector[0]) < EPSILONT);
    EXPECT_TRUE(fabs(distanceVector[1]) < EPSILONT);
    EXPECT_TRUE(fabs(distanceVector[2]) < EPSILONT);
    imageFCC2->euclideanDistanceVector(105, 45, distanceVector);
    EXPECT_NEAR(distanceVector[0], front2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], front2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], front2[2], EPSILONT);
    imageFCC2->euclideanDistanceVector(105, 93, distanceVector);
    EXPECT_NEAR(distanceVector[0], top2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], top2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], top2[2], EPSILONT);
    imageFCC2->euclideanDistanceVector(105, 106, distanceVector);
    EXPECT_NEAR(distanceVector[0], right2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], right2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], right2[2], EPSILONT);
    imageFCC2->euclideanDistanceVector(105, 117, distanceVector);
    EXPECT_NEAR(distanceVector[0], bottom2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], bottom2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], bottom2[2], EPSILONT);
    imageFCC2->euclideanDistanceVector(105, 104, distanceVector);
    EXPECT_NEAR(distanceVector[0], left2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], left2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], left2[2], EPSILONT);
    imageFCC2->euclideanDistanceVector(105, 165, distanceVector);
    EXPECT_NEAR(distanceVector[0], back2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], back2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], back2[2], EPSILONT);
    imageFCC2->euclideanDistanceVector(105, 69, distanceVector);
    EXPECT_NEAR(distanceVector[0], ft2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], ft2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], ft2[2], EPSILONT);
    imageFCC2->euclideanDistanceVector(105, 76, distanceVector);
    EXPECT_NEAR(distanceVector[0], fr2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], fr2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], fr2[2], EPSILONT);
    imageFCC2->euclideanDistanceVector(105, 81, distanceVector);
    EXPECT_NEAR(distanceVector[0], fb2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], fb2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], fb2[2], EPSILONT);
    imageFCC2->euclideanDistanceVector(105, 75, distanceVector);
    EXPECT_NEAR(distanceVector[0], fl2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], fl2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], fl2[2], EPSILONT);
    imageFCC2->euclideanDistanceVector(105, 100, distanceVector);
    EXPECT_NEAR(distanceVector[0], mtr2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], mtr2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], mtr2[2], EPSILONT);
    imageFCC2->euclideanDistanceVector(105, 112, distanceVector);
    EXPECT_NEAR(distanceVector[0], mbr2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], mbr2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], mbr2[2], EPSILONT);
    imageFCC2->euclideanDistanceVector(105, 111, distanceVector);
    EXPECT_NEAR(distanceVector[0], mbl2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], mbl2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], mbl2[2], EPSILONT);
    imageFCC2->euclideanDistanceVector(105, 99, distanceVector);
    EXPECT_NEAR(distanceVector[0], mtl2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], mtl2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], mtl2[2], EPSILONT);
    imageFCC2->euclideanDistanceVector(105, 129, distanceVector);
    EXPECT_NEAR(distanceVector[0], bt2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], bt2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], bt2[2], EPSILONT);
    imageFCC2->euclideanDistanceVector(105, 136, distanceVector);
    EXPECT_NEAR(distanceVector[0], br2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], br2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], br2[2], EPSILONT);
    imageFCC2->euclideanDistanceVector(105, 141, distanceVector);
    EXPECT_NEAR(distanceVector[0], bb2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], bb2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], bb2[2], EPSILONT);
    imageFCC2->euclideanDistanceVector(105, 135, distanceVector);
    EXPECT_NEAR(distanceVector[0], bl2[0], EPSILONT);
    EXPECT_NEAR(distanceVector[1], bl2[1], EPSILONT);
    EXPECT_NEAR(distanceVector[2], bl2[2], EPSILONT);

    delete latticeFCC1;
    delete latticeFCC2;
    delete imageFCC1;
    delete imageFCC2;
}