#ifndef BCCLATTICE_H
#define BCCLATTICE_H

#include "lattice.h"

namespace LatticeLib {

#define BCCOFFSET 0.629960524947437 // 1/(4^(1/3)), distance between layers in BCC
#define BCCHEXFACEDISTANCE 1.091123635971721 // hexagonal face neighbor distance
#define BCCSQFACEDISTANCE 1.259921049894873 // (\cbrt(2)) square face neighbor distance ( = 2 * BCCOFFSET)
    const double distanceTableBCC[] = {0.701972775991366, 0.559384096369300, 0.523708491831535, 0.504208119337289,
                                         0.485961099189012, 0.472741906135919, 0.458428017799460, 0.445843863595213,
                                         0.434019197645408, 0.421854125314656, 0.410046880337088, 0.398436206179092,
                                         0.388502787488950, 0.379144338651330, 0.368789186781820, 0.360067592029462,
                                         0.351589510084802, 0.340956184471487, 0.329472567765149, 0.321934283205210,
                                         0.313308029661695, 0.304521999486493, 0.295681765149159, 0.287079844458938,
                                         0.279572841418967, 0.270861674256076, 0.258622537052800, 0.247030386296779,
                                         0.239786630506896, 0.230416027579064, 0.222140243071163, 0.215396284206380,
                                         0.209046622997721, 0.201292811785985, 0.194850180312712, 0.186887340378882,
                                         0.178301036183765, 0.169774888060555, 0.160240158042547, 0.151141619183839,
                                         0.144910123075057, 0.139387081056519, 0.132275281214361, 0.123179449447133,
                                         0.115209909239135, 0.110282588275489, 0.105846354179058, 0.097971825318819,
                                         0.091618971374103, 0.084055977701946, 0.077881461109973, 0.073232744286903,
                                         0.067781308571245, 0.061551851798691, 0.053606146291214, 0.046420652020054,
                                         0.041350100604422, 0.036400013065505, 0.029826111258516, 0.023163184058998,
                                         0.016486093935675, 0.009027623284885, 0.000545114595576, -0.006409316162271,
                                         -0.011482052972629, -0.015909380103552, -0.021930295484404, -0.030471309324572,
                                         -0.040087312040690, -0.046264459750243, -0.049745671713369, -0.055999006275204,
                                         -0.063703031687841, -0.072133278469194, -0.080124877274717, -0.086253283696209,
                                         -0.088776416146436, -0.095688808377654, -0.104454984748970, -0.112888180402466,
                                         -0.121260312573985, -0.126321890828481, -0.131849231572847, -0.138220378699248,
                                         -0.145300216688578, -0.152684773950153, -0.159078310790973, -0.166091155853891,
                                         -0.173145831561477, -0.179553181648581, -0.186280945968988, -0.192493313638436,
                                         -0.199834267437540, -0.207937851311092, -0.215239752797464, -0.222649547807335,
                                         -0.231373128404468, -0.239614163904793, -0.247238387508153, -0.256049244942309,
                                         -0.261748975120585, -0.269512678472865, -0.278161635054214, -0.285938506381002,
                                         -0.294409262751931, -0.304112483169524, -0.313207636275675, -0.322104272848939,
                                         -0.332070852300711, -0.343230544965409, -0.352860726531219, -0.361270311111415,
                                         -0.369949001001639, -0.381124542872056, -0.390590115886440, -0.402038335648907,
                                         -0.413310900786398, -0.423543150723804, -0.436036024356762, -0.447960451557584,
                                         -0.460686204854493, -0.473981713655202, -0.487815571365090, -0.505860782414118,
                                         -0.521218530696975, -0.540411881786846, -0.581537424601552, -0.713634612236801};

    const double surfaceAreaTableBCC[] = {0, 0.125997385608669, 0.191970813671741, 0.241923187129695, 0.282131008042360,
                                          0.316275006763342, 0.345806627922048, 0.372390286980701, 0.396475714460908,
                                          0.419411967143177, 0.441124162650628, 0.461787219424666, 0.481333033690823,
                                          0.499402430643430, 0.526467842506923, 0.548648045024818, 0.569231757589842,
                                          0.588073434066089, 0.605961970736884, 0.622531495723893, 0.638637907919590,
                                          0.653887201602863, 0.668728788180822, 0.683131484583105, 0.697068883827276,
                                          0.710886857581797, 0.723961923632113, 0.737059272439330, 0.749580893594615,
                                          0.762115861983047, 0.774355315972584, 0.785908155684330, 0.797388892961326,
                                          0.808400956239741, 0.819313290350608, 0.829810770277812, 0.840112821268039,
                                          0.849982884847294, 0.859964444536431, 0.869763220298139, 0.879129058511994,
                                          0.888639877058020, 0.897956214520955, 0.906805819435379, 0.915775789009124,
                                          0.924064354289040, 0.932608195266278, 0.940786156937369, 0.948927692268288,
                                          0.956758612552700, 0.964531366724227, 0.971737008343395, 0.979048309951311,
                                          0.986083863210856, 0.992850133469127, 0.999800668370917, 1.006079033987392,
                                          1.012666696977954, 1.019037879498964, 1.025145766508999, 1.031205889242283,
                                          1.037134424558525, 1.042735275087447, 1.048525961247682, 1.054095955898927,
                                          1.059111171218900, 1.064426619781948, 1.069683090695119, 1.074368695147330,
                                          1.079387974706825, 1.084174992115214, 1.088456973647298, 1.092864558734935,
                                          1.097242081025250, 1.101356530451716, 1.105173336286512, 1.109281074087157,
                                          1.113097865548704, 1.116823701166583, 1.120433238893262, 1.124102484807611,
                                          1.127427403805442, 1.130728137775108, 1.134173874524808, 1.137036817480784,
                                          1.140004465227131, 1.143132276101678, 1.145658061037806, 1.148307479247094,
                                          1.151005590981295, 1.153316909724931, 1.155764881569628, 1.158281531810895,
                                          1.160417766130582, 1.162394716219787, 1.164819833213741, 1.166981961161279,
                                          1.168586013723230, 1.170741437732363, 1.172822297793811, 1.174246073806791,
                                          1.175940621823930, 1.177957901282925, 1.179265929761000, 1.180285683788796,
                                          1.182034574878205, 1.183665056474231, 1.184517967496084, 1.185702439411825,
                                          1.187195760476608, 1.188085477462950, 1.189060039961314, 1.190142061702973,
                                          1.191160402365383, 1.191953415483787, 1.192673346632491, 1.193645439461773,
                                          1.194412486418031, 1.194977644652607, 1.195269368883463, 1.196194482327463,
                                          1.196719181597887, 1.196553175620422, 1.196947665943325, 1.197723424476347,
                                          1.197419480937091, 1.197361434814706, 1.197809281639908, 1.197809281639908,
                                          1.197361434814706, 1.197419480937091, 1.197723424476348, 1.196947665943325,
                                          1.196553175620422, 1.196719181597887, 1.196194482327463, 1.195269368883463,
                                          1.194977644652606, 1.194412486418031, 1.193645439461773, 1.192673346632491,
                                          1.191953415483787, 1.191160402365382, 1.190142061702973, 1.189060039961314,
                                          1.188085477462950, 1.187195760476608, 1.185702439411825, 1.184517967496084,
                                          1.183665056474231, 1.182034574878204, 1.180285683788795, 1.179265929761000,
                                          1.177957901282924, 1.175940621823930, 1.174246073806790, 1.172822297793811,
                                          1.170741437732363, 1.168586013723229, 1.166981961161279, 1.164819833213741,
                                          1.162394716219787, 1.160417766130582, 1.158281531810895, 1.155764881569628,
                                          1.153316909724931, 1.151005590981295, 1.148307479247094, 1.145658061037807,
                                          1.143132276101678, 1.140004465227131, 1.137036817480784, 1.134173874524809,
                                          1.130728137775109, 1.127427403805442, 1.124102484807611, 1.120433238893261,
                                          1.116823701166583, 1.113097865548704, 1.109281074087157, 1.105173336286512,
                                          1.101356530451716, 1.097242081025250, 1.092864558734935, 1.088456973647298,
                                          1.084174992115213, 1.079387974706825, 1.074368695147330, 1.069683090695119,
                                          1.064426619781948, 1.059111171218900, 1.054095955898927, 1.048525961247682,
                                          1.042735275087447, 1.037134424558525, 1.031205889242284, 1.025145766508999,
                                          1.019037879498964, 1.012666696977954, 1.006079033987392, 0.999800668370918,
                                          0.992850133469127, 0.986083863210856, 0.979048309951311, 0.971737008343395,
                                          0.964531366724227, 0.956758612552700, 0.948927692268288, 0.940786156937368,
                                          0.932608195266278, 0.924064354289040, 0.915775789009124, 0.906805819435379,
                                          0.897956214520955, 0.888639877058020, 0.879129058511994, 0.869763220298139,
                                          0.859964444536431, 0.849982884847294, 0.840112821268039, 0.829810770277812,
                                          0.819313290350608, 0.808400956239741, 0.797388892961326, 0.785908155684330,
                                          0.774355315972584, 0.762115861983047, 0.749580893594615, 0.737059272439330,
                                          0.723961923632113, 0.710886857581797, 0.697068883827276, 0.683131484583105,
                                          0.668728788180822, 0.653887201602863, 0.638637907919590, 0.622531495723893,
                                          0.605961970736884, 0.588073434066089, 0.569231757589841, 0.548648045024818,
                                          0.526467842506923, 0.499402430643430, 0.481333033690823, 0.461787219424666,
                                          0.441124162650628, 0.419411967143177, 0.396475714460908, 0.372390286980701,
                                          0.345806627922048, 0.316275006763342, 0.282131008042360, 0.241923187129695,
                                          0.191970813671741, 0.125997385608669, 0};

    class BCCLattice : public Lattice {

    public:

        /**
         * Constructor for BCCLattice objects.
         *
         * Parameter    | in/out	| Comment
         * :----------  | :-------	| :--------
         * rows         | INPUT     | Number of rows.
         * columns      | INPUT     | Number of columns.
         * layers       | INPUT     | Number of layers.
         * scale        | INPUT     | The number of lattice points per unit volume.
         */
        BCCLattice(int rows, int columns, int layers, double density);

        /**
         * Copy constructor for BCCLattice objects.
         *
         * Parameter    | in/out	| Comment
         * :----------  | :-------	| :--------
         * original     | INPUT     | Object to be copied.
         */
        BCCLattice(const BCCLattice &original);

        /**
         * Destructor for BCCLattice objects.
         */
        ~BCCLattice();

        /**
        * Implements Lattice::getWidth().
        */
        double getWidth() const;

        /**
        * Implements Lattice::getHeight().
        */
        double getHeight() const;

        /**
        * Implements Lattice::getDepth().
        */
        double getDepth() const;

        /**
         * Implements Lattice::indexToX().
         */
        double indexToX(int elementIndex) const;

        /**
         * Implements Lattice::indexToY().
         */
        double indexToY(int elementIndex) const;

        /**
         * Implements Lattice::indexToZ().
         */
        double indexToZ(int elementIndex) const;

        /**
         * Implements Lattice::coordinatesToIndex();
         *
         * Parameter    | in/out	| Comment
         * :----------	| :-------	| :--------
         * coordinates	| INPUT 	| coordinates of the spatial elements
         */
        int coordinatesToIndex(vector<double> coordinates) const;

        /*
         * Approximates the distance from the element center to an edge intersecting the element based on the coverage value of the element.
         *
         * Parameter	| in/out	| Comment
         * :----------	| :-------	| :--------
         * coverage     | INPUT     | Element coverage value.
         */
        double approximateDistanceToElementCenter(double coverage) const;

        /*
         * Approximates the area of the intersection between the element and a planar surface based on the coverage value of the element.
         *
         * Parameter	| in/out	| Comment
         * :----------	| :-------	| :--------
         * coverage     | INPUT     | Element coverage value.
         */
        double approximateIntersectionArea(double coverage) const;

        /**
         * Returns the face neighbors of the element at \f$(row,column,layer)\f$.
         *
         * Parameter	| in/out	| Comment
         * :----------	| :-------	| :--------
         * rowIndex     | INPUT     | Row index.
         * columnIndex  | INPUT     | Column index.
         * layerIndex   | INPUT     | Layer index.
         * neighbors    | OUTPUT    | Extracted neighbors.
         */
        void get8Neighbors(int rowIndex, int columnIndex, int layerIndex, vector <Neighbor> &neighbors) const;

        /**
         * Returns the face neighbors of the element with index \f$(index)\f$.
         *
         * Parameter	| in/out	| Comment
         * :----------	| :-------	| :--------
         * elementindex | INPUT     | Element index.
         * neighbors    | OUTPUT    | Extracted neighbors.
         */
        void get8Neighbors(int elementIndex, vector <Neighbor> &neighbors) const;

        /**
         * Returns the face- and edge neighbors of the element at \f$(row,column,layer)\f$.
         *
         * Parameter	| in/out	| Comment
         * :----------	| :-------	| :--------
         * rowIndex     | INPUT     | Row index.
         * columnIndex  | INPUT     | Column index.
         * layerIndex   | INPUT     | Layer index.
         * neighbors    | OUTPUT    | Extracted neighbors.
         */
        void get14Neighbors(int rowIndex, int columnIndex, int layerIndex, vector <Neighbor> &neighbors) const;

        /**
         * Returns the face- and edge neighbors of the element with index \f$(index)\f$.
         *
         * Parameter	| in/out	| Comment
         * :----------	| :-------	| :--------
         * elementindex | INPUT     | Element index.
         * neighbors    | OUTPUT    | Extracted neighbors.
         */
        void get14Neighbors(int elementIndex, vector <Neighbor> &neighbors) const;

        /**
         * Implements Lattice::getNeighbors().
         *
         * Parameter	    | in/out	| Comment
         * :----------	    | :-------	| :--------
         * rowIndex         | INPUT     | Row index.
         * columnIndex      | INPUT     | Column index.
         * layerIndex       | INPUT     | Layer index.
         * neighborhoodSize | INPUT     | Requested neighborhood size. <br> 8: hexagonal face neighbors <br> 14: hexagonal- and square face neighbors
         * neighbors        | OUTPUT    | Extracted neighbors.
         */
        void getNeighbors(int rowIndex, int columnIndex, int layerIndex, int neighborhoodSize, vector <Neighbor> &neighbors) const;

        /**
         * Implements Lattice::getNeighbors().
         *
         * Parameter	    | in/out	| Comment
         * :----------	    | :-------	| :--------
         * elementIndex     | INPUT     | Element index.
         * neighborhoodSize | INPUT     | Requested neighborhood size. <br> 8: hexagonal face neighbors <br> 14: hexagonal- and square face neighbors
         * neighbors        | OUTPUT    | Extracted neighbors.
         */
        void getNeighbors(int elementIndex, int neighborhoodSize, vector <Neighbor> &neighbors) const;
    };
}

#endif