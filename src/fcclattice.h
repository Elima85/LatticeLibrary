#ifndef FCCLATTICE_H
#define FCCLATTICE_H

#include "lattice.h"

namespace LatticeLib {
#define FCCOFFSET 0.793700525984100 // 1/(2^(1/3)), distance between layers in FCC
#define FCCFACEDISTANCE 1.122462048309373 // face neighbor distance
#define FCCPOINTDISTANCE 1.587401051968199 // 2/(2^(1/3)), point neighbor distance
    const double distanceTableFCC[] = {0.714077046326529, 0.584803910742471, 0.539549351387385, 0.514827152974004,
                                         0.494182137726088, 0.474779246135581, 0.457429195670903, 0.444857955564193,
                                         0.432049156262755, 0.416457896497643, 0.406295118688379, 0.395099247457030,
                                         0.383984914266236, 0.373939520778821, 0.365127204667108, 0.354809540369391,
                                         0.344742627461438, 0.335591156334671, 0.326989274134147, 0.317776359547039,
                                         0.307758730036562, 0.297990203600959, 0.289601501302384, 0.282373570385305,
                                         0.274091628675670, 0.265677476283618, 0.257639748014919, 0.249811259480845,
                                         0.241931405009107, 0.234613601807503, 0.226629910710280, 0.218426567840259,
                                         0.210969972072138, 0.204970597016393, 0.198200540088346, 0.190695890815276,
                                         0.182793900838194, 0.175633893526011, 0.170742902343941, 0.162768805584692,
                                         0.156227685808754, 0.151008107616109, 0.145752745772041, 0.139159470809782,
                                         0.131352246116331, 0.124123023669870, 0.117882609641882, 0.112013962417163,
                                         0.105179520511002, 0.098065042076195, 0.090231585203651, 0.083009647739121,
                                         0.078744449568174, 0.068700177909267, 0.061433745479717, 0.055568374014679,
                                         0.048991541832693, 0.042445590781161, 0.034485090405223, 0.027694335480268,
                                         0.021722076617656, 0.015428180841809, 0.010236512587796, 0.003707371875781,
                                         -0.003630851925319, -0.010631573445721, -0.016410970291770, -0.023322622799315,
                                         -0.028825749810292, -0.034732814119153, -0.042002255077926, -0.048067280463827,
                                         -0.055747223920438, -0.062483286304572, -0.068408121666749, -0.074493907320462,
                                         -0.081306297387967, -0.088382396840916, -0.096162589794095, -0.104260062680029,
                                         -0.111686279510446, -0.118634581261823, -0.125211426614980, -0.131617741383244,
                                         -0.138195415529015, -0.145384226245301, -0.149171106862121, -0.155255401999289,
                                         -0.163796132921106, -0.172131726206582, -0.178992083695221, -0.186852374100716,
                                         -0.193109335183382, -0.199360097653993, -0.208887666498899, -0.216334847227242,
                                         -0.222520382851360, -0.229712301302484, -0.238404293937451, -0.246180071162991,
                                         -0.251547526818121, -0.259023433738466, -0.268319052135775, -0.277427580468557,
                                         -0.285128086314985, -0.293499153982363, -0.300869506924703, -0.309212407534078,
                                         -0.320907601467231, -0.328155731251493, -0.336715699297306, -0.345794247700394,
                                         -0.355579894093477, -0.367494153207715, -0.378436472328643, -0.387858147892052,
                                         -0.396477352246857, -0.405475042921039, -0.416825667569806, -0.431295712646092,
                                         -0.446430380869664, -0.462255639266114, -0.479204286758705, -0.494706543978469,
                                         -0.511852029543659, -0.534751990156574, -0.581183711707067,
                                         -0.719465948707445};

    const double surfaceAreaTableFCC[] = {0, 0.107644426761900, 0.169623924735728, 0.221392483988211, 0.266653223464502,
                                          0.304043436454096, 0.337759429418085, 0.368712076506037, 0.397097616032672,
                                          0.423618374117232, 0.448129709415602, 0.470642154310146, 0.491585844058303,
                                          0.511201127050812, 0.539618255825304, 0.564077817667111, 0.586757361449287,
                                          0.607739519981200, 0.627348371805389, 0.645714825423749, 0.662948726429815,
                                          0.679156525629483, 0.694678196349908, 0.709562114354290, 0.724111994414113,
                                          0.738028558322707, 0.751056623241873, 0.763824366780870, 0.776031002098250,
                                          0.787866316540703, 0.799210065799742, 0.810002098020650, 0.820811620248914,
                                          0.830794545881083, 0.840735912151517, 0.850660593294051, 0.860149777073857,
                                          0.869730831006855, 0.878816219836041, 0.887606478252911, 0.896552445755646,
                                          0.904883046409674, 0.913452875812150, 0.921260797412093, 0.929582317615042,
                                          0.937319203816039, 0.944862542190089, 0.952635788024128, 0.959805221822293,
                                          0.966936541453641, 0.974301306752388, 0.980782711804276, 0.987393866863917,
                                          0.994352334374803, 1.000597049052579, 1.006849550523865, 1.013076843908344,
                                          1.018924936147424, 1.024890859921657, 1.030457449295443, 1.036099377888236,
                                          1.041709427471978, 1.046884833995352, 1.052197298440821, 1.056780071557013,
                                          1.061881309834347, 1.066746113225169, 1.071270201538692, 1.075681794709097,
                                          1.080194633241477, 1.084699653153135, 1.088687874031858, 1.092879814167151,
                                          1.096989180637835, 1.100817485396549, 1.104862147609960, 1.108490348653499,
                                          1.111939191257102, 1.115821646583705, 1.119331769995511, 1.122671791512609,
                                          1.125865500085474, 1.129169521284977, 1.132406326876369, 1.135398789566513,
                                          1.138356742626721, 1.141253623091323, 1.144331632799504, 1.146910242656106,
                                          1.149537015959026, 1.152368582769088, 1.155178165794542, 1.157309120775349,
                                          1.159892073477834, 1.162435576746727, 1.164665166866734, 1.166981292311854,
                                          1.169005330305386, 1.170985934803687, 1.173041089801222, 1.174773993560193,
                                          1.176651511572310, 1.178474195530328, 1.180042417317113, 1.181654215696113,
                                          1.183274702933344, 1.184442490055415, 1.185659554851534, 1.187281667858262,
                                          1.188458773981300, 1.189208193331679, 1.190610357728505, 1.191613343375600,
                                          1.192424236513653, 1.193086615271163, 1.193908195398122, 1.194626340917584,
                                          1.195056232051709, 1.195796107063423, 1.196330236526516, 1.196638819966014,
                                          1.197033289662508, 1.197536752245824, 1.197432604754310, 1.197790695705143,
                                          1.198107660240882, 1.197956224610254, 1.198334588214343, 1.198334588214343,
                                          1.197956224610254, 1.198107660240882, 1.197790695705143, 1.197432604754310,
                                          1.197536752245824, 1.197033289662508, 1.196638819966014, 1.196330236526516,
                                          1.195796107063423, 1.195056232051708, 1.194626340917584, 1.193908195398122,
                                          1.193086615271163, 1.192424236513654, 1.191613343375600, 1.190610357728505,
                                          1.189208193331679, 1.188458773981300, 1.187281667858262, 1.185659554851534,
                                          1.184442490055415, 1.183274702933344, 1.181654215696113, 1.180042417317113,
                                          1.178474195530328, 1.176651511572310, 1.174773993560194, 1.173041089801222,
                                          1.170985934803687, 1.169005330305386, 1.166981292311854, 1.164665166866734,
                                          1.162435576746728, 1.159892073477834, 1.157309120775349, 1.155178165794541,
                                          1.152368582769087, 1.149537015959026, 1.146910242656105, 1.144331632799504,
                                          1.141253623091323, 1.138356742626721, 1.135398789566513, 1.132406326876369,
                                          1.129169521284977, 1.125865500085474, 1.122671791512609, 1.119331769995511,
                                          1.115821646583705, 1.111939191257102, 1.108490348653499, 1.104862147609959,
                                          1.100817485396549, 1.096989180637834, 1.092879814167150, 1.088687874031858,
                                          1.084699653153134, 1.080194633241476, 1.075681794709097, 1.071270201538692,
                                          1.066746113225169, 1.061881309834347, 1.056780071557014, 1.052197298440821,
                                          1.046884833995352, 1.041709427471978, 1.036099377888236, 1.030457449295443,
                                          1.024890859921657, 1.018924936147424, 1.013076843908343, 1.006849550523864,
                                          1.000597049052579, 0.994352334374802, 0.987393866863916, 0.980782711804276,
                                          0.974301306752388, 0.966936541453641, 0.959805221822293, 0.952635788024128,
                                          0.944862542190089, 0.937319203816039, 0.929582317615043, 0.921260797412093,
                                          0.913452875812149, 0.904883046409674, 0.896552445755646, 0.887606478252911,
                                          0.878816219836041, 0.869730831006855, 0.860149777073857, 0.850660593294051,
                                          0.840735912151517, 0.830794545881083, 0.820811620248914, 0.810002098020650,
                                          0.799210065799742, 0.787866316540703, 0.776031002098250, 0.763824366780870,
                                          0.751056623241873, 0.738028558322707, 0.724111994414113, 0.709562114354290,
                                          0.694678196349908, 0.679156525629483, 0.662948726429815, 0.645714825423749,
                                          0.627348371805389, 0.607739519981200, 0.586757361449287, 0.564077817667111,
                                          0.539618255825304, 0.511201127050812, 0.491585844058303, 0.470642154310146,
                                          0.448129709415602, 0.423618374117232, 0.397097616032672, 0.368712076506037,
                                          0.337759429418085, 0.304043436454096, 0.266653223464502, 0.221392483988211,
                                          0.169623924735728, 0.107644426761900, 0};

    class FCCLattice : public Lattice {

    public:

        /**
         * Constructor for FCCLattice objects.
         *
         * Parameter    | in/out	| Comment
         * :----------  | :-------	| :--------
         * rows         | INPUT     | Number of rows.
         * columns      | INPUT     | Number of columns.
         * layers       | INPUT     | Number of layers.
         * scale        | INPUT     | The number of lattice points per unit volume.
         */
        FCCLattice(int rows, int columns, int layers, double density);

        /**
         * Copy constructor for FCCLattice objects.
         *
         * Parameter    | in/out	| Comment
         * :----------  | :-------	| :--------
         * original     | INPUT     | Object to be copied.
         */
        FCCLattice(const FCCLattice &original);

        /**
         * Destructor for BCCLattice objects.
         */
        ~FCCLattice();

        /**
        * Implements Lattice::getElementWidth().
        */
        double getElementWidth() const;

        /**
        * Implements Lattice::getElementHeight().
        */
        double getElementHeight() const;

        /**
        * Implements Lattice::getElementDepth().
        */
        double getElementDepth() const;

        /**
        * Implements Lattice::getWidth().
        */
        double getWidth() const;

        /**
        * Implements Lattice::getHeight().
        */
        double getHeight() const;

        /**
        * Implements Lattice::getDepth().
        */
        double getDepth() const;

        /**
        * Implements Lattice::indexToX().
        */
        double indexToX(int elementIndex) const;

        /**
        * Implements Lattice::indexToY().
        */
        double indexToY(int elementIndex) const;

        /**
        * Implements Lattice::indexToZ().
        */
        double indexToZ(int elementIndex) const;

        /**
         * Implements Lattice::coordinatesToIndex();
         *
         * Parameter    | in/out	| Comment
         * :----------	| :-------	| :--------
         * coordinates	| INPUT 	| coordinates of the spatial elements
         */
        int coordinatesToIndex(vector<double> coordinates) const;

        /*
         * Approximates the distance from the element center to an edge intersecting the element based on the coverage value of the element.
         *
         * Parameter	| in/out	| Comment
         * :----------	| :-------	| :--------
         * coverage     | INPUT     | Element coverage value.
         */
        double approximateDistanceToElementCenter(double coverage) const;

        /*
         * Approximates the area of the intersection between the element and a planar surface based on the coverage value of the element.
         *
         * Parameter	| in/out	| Comment
         * :----------	| :-------	| :--------
         * coverage     | INPUT     | Element coverage value.
         */
        double approximateIntersectionArea(double coverage) const;

        /**
         * Returns the face neighbors of the element at \f$(row,column,layer)\f$.
         *
         * Parameter    | in/out	| Comment
         * :----------  | :-------	| :--------
         * rowIndex     | INPUT     | Row index.
         * columnIndex  | INPUT     | Column index.
         * layerIndex   | INPUT     | Layer index.
         * neighbors    | OUTPUT    | Extracted neighbors.
         */
        void get12Neighbors(int rowIndex, int columnIndex, int layerIndex, vector<Neighbor> &neighbors) const;

        /**
         * Returns the face neighbors of the element with index \f$(index)\f$.
         *
         * Parameter	| in/out	| Comment
         * :----------	| :-------	| :--------
         * elementindex | INPUT     | Element index.
         * neighbors    | OUTPUT    | Extracted neighbors.
         */
        void get12Neighbors(int elementIndex, vector<Neighbor> &neighbors) const;

        /**
         * Returns the face- and edge neighbors of the element at \f$(row,column,layer)\f$.
         *
         * Parameter    | in/out	| Comment
         * :----------  | :-------	| :--------
         * rowIndex     | INPUT     | Row index.
         * columnIndex  | INPUT     | Column index.
         * layerIndex   | INPUT     | Layer index.
         * neighbors    | OUTPUT    | Extracted neighbors.
         */
        void get18Neighbors(int rowIndex, int columnIndex, int layerIndex, vector<Neighbor> &neighbors) const;

        /**
         * Returns the face- and edge neighbors of the element with index \f$(index)\f$.
         *
         * Parameter	| in/out	| Comment
         * :----------	| :-------	| :--------
         * elementindex | INPUT     | Element index.
         * neighbors    | OUTPUT    | Extracted neighbors.
         */
        void get18Neighbors(int elementIndex, vector<Neighbor> &neighbors) const;

        /**
         * Implements Lattice::getNeighbors().
         *
         * Parameter	    | in/out	| Comment
         * :----------	    | :-------	| :--------
         * rowIndex         | INPUT     | Row index.
         * columnIndex      | INPUT     | Column index.
         * layerIndex       | INPUT     | Layer index.
         * neighborhoodSize | INPUT     | Requested neighborhood size. <br> 12: face neighbors <br> 18: face- and point neighbors
         * neighbors        | OUTPUT    | Extracted neighbors.
         */
        void getNeighbors(int rowIndex, int columnIndex, int layerIndex, int neighborhoodSize, vector<Neighbor> &neighbors) const;

        /**
         * Implements Lattice::getNeighbors().
         *
         * Parameter	    | in/out	| Comment
         * :----------	    | :-------	| :--------
         * elementindex     | INPUT     | Element index.
         * neighborhoodSize | INPUT     | Requested neighborhood size. <br> 12: face neighbors <br> 18: face- and point neighbors
         * neighbors        | OUTPUT    | Extracted neighbors.
         */
        void getNeighbors(int elementIndex, int neighborhoodSize, vector<Neighbor> &neighbors) const;
    };

}

#endif